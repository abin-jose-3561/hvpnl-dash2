{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\20338783\\\\Desktop\\\\React\\\\hvpnl-dash\\\\hvpnl\\\\src\\\\components\\\\BarChart.jsx\";\nimport { useTheme } from \"@mui/material\";\nimport { ResponsiveBar } from \"@nivo/bar\";\nimport React, { Component } from \"react\";\nimport { tokens } from \"../theme\";\nimport { mockDataContacts as data } from \"../data/mockData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass BarChart extends Component {\n  constructor(props) {\n    super();\n    this.getChartData = () => {\n      fetch(\"http://localhost:3001/tb\").then(response => response.json()).then(result => {\n        this.setState({\n          isLoaded: true,\n          chartData: result.chart_data\n        });\n      }, error => {\n        this.setState({\n          isLoaded: true,\n          error\n        });\n      });\n    };\n    this.state = {\n      error: null,\n      isLoaded: false,\n      chartData: []\n    };\n  }\n  componentDidMount() {\n    this.getChartData();\n  }\n  render() {\n    if (this.state.error) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Error: \", this.state.error.message]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 18\n      }, this);\n    } else if (!this.state.isLoaded) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner-border\",\n        role: \"status\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"sr-only\",\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 15\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: /*#__PURE__*/_jsxDEV(LineChart, {\n          chartId: \"chart1\",\n          data: this.state.chartData.data,\n          axisNames: {\n            xAxis: [this.state.chartData.label.domainAxis],\n            yAxis: [this.state.chartData.label.rangeAxis]\n          },\n          lineForXAxis: \"Date\",\n          linesForFirstAxis: [\"Ford\", \"Honda\", \"Renault\", \"Toyota\"],\n          chartTitle: this.state.chartData.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 15\n      }, this);\n    }\n  }\n}\nexport default BarChart;\n\n// const BarChart = ({ isDashboard = false }) => {\n//   const theme = useTheme();\n//   const colors = tokens(theme.palette.mode);\n\n//   return (\n//     <ResponsiveBar\n//       data={data}\n//       theme={{\n//         // added\n//         axis: {\n//           domain: {\n//             line: {\n//               stroke: colors.grey[100],\n//             },\n//           },\n//           legend: {\n//             text: {\n//               fill: colors.grey[100],\n//             },\n//           },\n//           ticks: {\n//             line: {\n//               stroke: colors.grey[100],\n//               strokeWidth: 1,\n//             },\n//             text: {\n//               fill: colors.grey[100],\n//             },\n//           },\n//         },\n//         legends: {\n//           text: {\n//             fill: colors.grey[100],\n//           },\n//         },\n//       }}\n//       keys={[\"TrippingCount\"]}\n//       indexBy=\"id\"\n//       margin={{ top: 50, right: 130, bottom: 50, left: 60 }}\n//       padding={0.3}\n//       valueScale={{ type: \"linear\" }}\n//       indexScale={{ type: \"band\", round: true }}\n//       colors={{ scheme: \"nivo\" }}\n//       defs={[\n//         {\n//           id: \"dots\",\n//           type: \"patternDots\",\n//           background: \"inherit\",\n//           color: \"#38bcb2\",\n//           size: 4,\n//           padding: 1,\n//           stagger: true,\n//         },\n//         {\n//           id: \"lines\",\n//           type: \"patternLines\",\n//           background: \"inherit\",\n//           color: \"#eed312\",\n//           rotation: -45,\n//           lineWidth: 6,\n//           spacing: 10,\n//         },\n//       ]}\n//       borderColor={{\n//         from: \"color\",\n//         modifiers: [[\"darker\", \"1.6\"]],\n//       }}\n//       axisTop={null}\n//       axisRight={null}\n//       axisBottom={{\n//         tickSize: 5,\n//         tickPadding: 5,\n//         tickRotation: 0,\n//         legend: isDashboard ? undefined : \"Circle\", // changed\n//         legendPosition: \"middle\",\n//         legendOffset: 32,\n//       }}\n//       axisLeft={{\n//         tickSize: 5,\n//         tickPadding: 5,\n//         tickRotation: 0,\n//         legend: isDashboard ? undefined : \"TrippingCount\", // changed\n//         legendPosition: \"middle\",\n//         legendOffset: -40,\n//       }}\n//       enableLabel={false}\n//       labelSkipWidth={12}\n//       labelSkipHeight={12}\n//       labelTextColor={{\n//         from: \"color\",\n//         modifiers: [[\"darker\", 1.6]],\n//       }}\n//       legends={[\n//         {\n//           dataFrom: \"keys\",\n//           anchor: \"bottom-right\",\n//           direction: \"column\",\n//           justify: false,\n//           translateX: 120,\n//           translateY: 0,\n//           itemsSpacing: 2,\n//           itemWidth: 100,\n//           itemHeight: 20,\n//           itemDirection: \"left-to-right\",\n//           itemOpacity: 0.85,\n//           symbolSize: 20,\n//           effects: [\n//             {\n//               on: \"hover\",\n//               style: {\n//                 itemOpacity: 1,\n//               },\n//             },\n//           ],\n//         },\n//       ]}\n//       role=\"application\"\n//       barAriaLabel={function (e) {\n//         return e.id + \": \" + e.formattedValue + \" in country: \" + e.indexValue;\n//       }}\n//     />\n//   );\n// };\n\n// // export default BarChart;","map":{"version":3,"names":["useTheme","ResponsiveBar","React","Component","tokens","mockDataContacts","data","BarChart","constructor","props","getChartData","fetch","then","response","json","result","setState","isLoaded","chartData","chart_data","error","state","componentDidMount","render","message","xAxis","label","domainAxis","yAxis","rangeAxis","title"],"sources":["C:/Users/20338783/Desktop/React/hvpnl-dash/hvpnl/src/components/BarChart.jsx"],"sourcesContent":["import { useTheme } from \"@mui/material\";\r\nimport { ResponsiveBar } from \"@nivo/bar\";\r\nimport React, { Component } from \"react\";\r\nimport { tokens } from \"../theme\";\r\nimport { mockDataContacts as data } from \"../data/mockData\";\r\n\r\n\r\n\r\nclass BarChart extends Component {\r\n  constructor(props) {\r\n      super();\r\n      this.state = {\r\n          error: null,\r\n          isLoaded: false,\r\n          chartData: [],\r\n      };\r\n  }\r\n  getChartData = () => {\r\n    fetch(\"http://localhost:3001/tb\")\r\n          .then((response) => response.json())\r\n          .then(\r\n              (result) => {\r\n                  this.setState({\r\n                      isLoaded: true,\r\n                      chartData: result.chart_data,\r\n                  });\r\n              },\r\n              (error) => {\r\n                  this.setState({\r\n                      isLoaded: true,\r\n                      error,\r\n                  });\r\n              }\r\n          );\r\n  };\r\n\r\n  componentDidMount() {\r\n      this.getChartData();\r\n  }\r\n  render() {\r\n      if (this.state.error) {\r\n          return <div>Error: {this.state.error.message}</div>;\r\n      } else if (!this.state.isLoaded) {\r\n          return (\r\n              <div className=\"spinner-border\" role=\"status\">\r\n                  <span className=\"sr-only\">Loading...</span>\r\n              </div>\r\n          );\r\n      } else {\r\n          return (\r\n              <React.Fragment>\r\n                  <LineChart\r\n                      chartId=\"chart1\"\r\n                      data={this.state.chartData.data}\r\n                      axisNames={{\r\n                          xAxis: [this.state.chartData.label.domainAxis],\r\n                          yAxis: [this.state.chartData.label.rangeAxis],\r\n                      }}\r\n                      lineForXAxis=\"Date\"\r\n                      linesForFirstAxis={[\"Ford\", \"Honda\", \"Renault\", \"Toyota\"]}\r\n                      chartTitle={this.state.chartData.title}\r\n                  />\r\n              </React.Fragment>\r\n          );\r\n      }\r\n  }\r\n}\r\n\r\nexport default BarChart;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// const BarChart = ({ isDashboard = false }) => {\r\n//   const theme = useTheme();\r\n//   const colors = tokens(theme.palette.mode);\r\n\r\n//   return (\r\n//     <ResponsiveBar\r\n//       data={data}\r\n//       theme={{\r\n//         // added\r\n//         axis: {\r\n//           domain: {\r\n//             line: {\r\n//               stroke: colors.grey[100],\r\n//             },\r\n//           },\r\n//           legend: {\r\n//             text: {\r\n//               fill: colors.grey[100],\r\n//             },\r\n//           },\r\n//           ticks: {\r\n//             line: {\r\n//               stroke: colors.grey[100],\r\n//               strokeWidth: 1,\r\n//             },\r\n//             text: {\r\n//               fill: colors.grey[100],\r\n//             },\r\n//           },\r\n//         },\r\n//         legends: {\r\n//           text: {\r\n//             fill: colors.grey[100],\r\n//           },\r\n//         },\r\n//       }}\r\n//       keys={[\"TrippingCount\"]}\r\n//       indexBy=\"id\"\r\n//       margin={{ top: 50, right: 130, bottom: 50, left: 60 }}\r\n//       padding={0.3}\r\n//       valueScale={{ type: \"linear\" }}\r\n//       indexScale={{ type: \"band\", round: true }}\r\n//       colors={{ scheme: \"nivo\" }}\r\n//       defs={[\r\n//         {\r\n//           id: \"dots\",\r\n//           type: \"patternDots\",\r\n//           background: \"inherit\",\r\n//           color: \"#38bcb2\",\r\n//           size: 4,\r\n//           padding: 1,\r\n//           stagger: true,\r\n//         },\r\n//         {\r\n//           id: \"lines\",\r\n//           type: \"patternLines\",\r\n//           background: \"inherit\",\r\n//           color: \"#eed312\",\r\n//           rotation: -45,\r\n//           lineWidth: 6,\r\n//           spacing: 10,\r\n//         },\r\n//       ]}\r\n//       borderColor={{\r\n//         from: \"color\",\r\n//         modifiers: [[\"darker\", \"1.6\"]],\r\n//       }}\r\n//       axisTop={null}\r\n//       axisRight={null}\r\n//       axisBottom={{\r\n//         tickSize: 5,\r\n//         tickPadding: 5,\r\n//         tickRotation: 0,\r\n//         legend: isDashboard ? undefined : \"Circle\", // changed\r\n//         legendPosition: \"middle\",\r\n//         legendOffset: 32,\r\n//       }}\r\n//       axisLeft={{\r\n//         tickSize: 5,\r\n//         tickPadding: 5,\r\n//         tickRotation: 0,\r\n//         legend: isDashboard ? undefined : \"TrippingCount\", // changed\r\n//         legendPosition: \"middle\",\r\n//         legendOffset: -40,\r\n//       }}\r\n//       enableLabel={false}\r\n//       labelSkipWidth={12}\r\n//       labelSkipHeight={12}\r\n//       labelTextColor={{\r\n//         from: \"color\",\r\n//         modifiers: [[\"darker\", 1.6]],\r\n//       }}\r\n//       legends={[\r\n//         {\r\n//           dataFrom: \"keys\",\r\n//           anchor: \"bottom-right\",\r\n//           direction: \"column\",\r\n//           justify: false,\r\n//           translateX: 120,\r\n//           translateY: 0,\r\n//           itemsSpacing: 2,\r\n//           itemWidth: 100,\r\n//           itemHeight: 20,\r\n//           itemDirection: \"left-to-right\",\r\n//           itemOpacity: 0.85,\r\n//           symbolSize: 20,\r\n//           effects: [\r\n//             {\r\n//               on: \"hover\",\r\n//               style: {\r\n//                 itemOpacity: 1,\r\n//               },\r\n//             },\r\n//           ],\r\n//         },\r\n//       ]}\r\n//       role=\"application\"\r\n//       barAriaLabel={function (e) {\r\n//         return e.id + \": \" + e.formattedValue + \" in country: \" + e.indexValue;\r\n//       }}\r\n//     />\r\n//   );\r\n// };\r\n\r\n// // export default BarChart;"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,eAAe;AACxC,SAASC,aAAa,QAAQ,WAAW;AACzC,OAAOC,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,MAAM,QAAQ,UAAU;AACjC,SAASC,gBAAgB,IAAIC,IAAI,QAAQ,kBAAkB;AAAC;AAI5D,MAAMC,QAAQ,SAASJ,SAAS,CAAC;EAC/BK,WAAW,CAACC,KAAK,EAAE;IACf,KAAK,EAAE;IAAC,KAOZC,YAAY,GAAG,MAAM;MACnBC,KAAK,CAAC,0BAA0B,CAAC,CAC1BC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACnCF,IAAI,CACAG,MAAM,IAAK;QACR,IAAI,CAACC,QAAQ,CAAC;UACVC,QAAQ,EAAE,IAAI;UACdC,SAAS,EAAEH,MAAM,CAACI;QACtB,CAAC,CAAC;MACN,CAAC,EACAC,KAAK,IAAK;QACP,IAAI,CAACJ,QAAQ,CAAC;UACVC,QAAQ,EAAE,IAAI;UACdG;QACJ,CAAC,CAAC;MACN,CAAC,CACJ;IACT,CAAC;IAvBG,IAAI,CAACC,KAAK,GAAG;MACTD,KAAK,EAAE,IAAI;MACXH,QAAQ,EAAE,KAAK;MACfC,SAAS,EAAE;IACf,CAAC;EACL;EAoBAI,iBAAiB,GAAG;IAChB,IAAI,CAACZ,YAAY,EAAE;EACvB;EACAa,MAAM,GAAG;IACL,IAAI,IAAI,CAACF,KAAK,CAACD,KAAK,EAAE;MAClB,oBAAO;QAAA,WAAK,SAAO,EAAC,IAAI,CAACC,KAAK,CAACD,KAAK,CAACI,OAAO;MAAA;QAAA;QAAA;QAAA;MAAA,QAAO;IACvD,CAAC,MAAM,IAAI,CAAC,IAAI,CAACH,KAAK,CAACJ,QAAQ,EAAE;MAC7B,oBACI;QAAK,SAAS,EAAC,gBAAgB;QAAC,IAAI,EAAC,QAAQ;QAAA,uBACzC;UAAM,SAAS,EAAC,SAAS;UAAA,UAAC;QAAU;UAAA;UAAA;UAAA;QAAA;MAAO;QAAA;QAAA;QAAA;MAAA,QACzC;IAEd,CAAC,MAAM;MACH,oBACI,QAAC,KAAK,CAAC,QAAQ;QAAA,uBACX,QAAC,SAAS;UACN,OAAO,EAAC,QAAQ;UAChB,IAAI,EAAE,IAAI,CAACI,KAAK,CAACH,SAAS,CAACZ,IAAK;UAChC,SAAS,EAAE;YACPmB,KAAK,EAAE,CAAC,IAAI,CAACJ,KAAK,CAACH,SAAS,CAACQ,KAAK,CAACC,UAAU,CAAC;YAC9CC,KAAK,EAAE,CAAC,IAAI,CAACP,KAAK,CAACH,SAAS,CAACQ,KAAK,CAACG,SAAS;UAChD,CAAE;UACF,YAAY,EAAC,MAAM;UACnB,iBAAiB,EAAE,CAAC,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,QAAQ,CAAE;UAC1D,UAAU,EAAE,IAAI,CAACR,KAAK,CAACH,SAAS,CAACY;QAAM;UAAA;UAAA;UAAA;QAAA;MACzC;QAAA;QAAA;QAAA;MAAA,QACW;IAEzB;EACJ;AACF;AAEA,eAAevB,QAAQ;;AAYv},"metadata":{},"sourceType":"module","externalDependencies":[]}