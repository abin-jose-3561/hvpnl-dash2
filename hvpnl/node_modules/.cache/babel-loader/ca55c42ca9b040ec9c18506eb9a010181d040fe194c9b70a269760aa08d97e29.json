{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\20338783\\\\Desktop\\\\React\\\\hvpnl-dash\\\\hvpnl\\\\src\\\\components\\\\BarChart.jsx\",\n  _s = $RefreshSig$();\nimport { useTheme } from \"@mui/material\";\nimport { ResponsiveBar } from \"@nivo/bar\";\nimport { tokens } from \"../theme\";\nimport { mockDataContacts as data } from \"../data/mockData\";\nimport React, { Component, useState, useEffect } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport Axios from \"axios\"; //axios library to make requests to api\n\n// Chart.defaults.global.defaultFontFamily = \"Roboto, sans-serif\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BarChart() {\n  _s();\n  //retrieving data from api\n  const [tbs, settbs] = useState([]);\n  useEffect(() => {\n    Axios.get(\"http://localhost:3001/tb\").then(response => {\n      settbs(response.data);\n      console.log(response.data);\n    });\n  }, []);\n  const data = {\n    labels: Object.keys(tbs),\n    datasets: [{\n      axis: \"y\",\n      label: \"My First Dataset\",\n      data: Object.values(tbs),\n      fill: false,\n      backgroundColor: [\"rgba(255, 99, 132, 0.2)\", \"rgba(255, 159, 64, 0.2)\", \"rgba(255, 205, 86, 0.2)\", \"rgba(75, 192, 192, 0.2)\", \"rgba(54, 162, 235, 0.2)\", \"rgba(153, 102, 255, 0.2)\", \"rgba(201, 203, 207, 0.2)\"],\n      borderColor: [\"rgb(255, 99, 132)\", \"rgb(255, 159, 64)\", \"rgb(255, 205, 86)\", \"rgb(75, 192, 192)\", \"rgb(54, 162, 235)\", \"rgb(153, 102, 255)\", \"rgb(201, 203, 207)\"],\n      borderWidth: 1\n    }]\n  };\n  const options = {\n    indexAxis: \"y\",\n    // Elements options apply to all of the options unless overridden in a dataset\n    // In this case, we are setting the border of each horizontal bar to be 2px wide\n    elements: {\n      bar: {\n        borderWidth: 2\n      }\n    },\n    responsive: true,\n    plugins: {\n      legend: {\n        position: \"right\",\n        display: false\n      },\n      title: {\n        display: true,\n        text: \"Chart.js Horizontal Bar Chart\"\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Bar, {\n      data: data,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n_s(BarChart, \"45xv5vGf0JDMiu8kF6RGGT7DdjY=\");\n_c = BarChart;\nexport default BarChart;\n\n// // const BarChart = ({ isDashboard = false }) => {\n//   const theme = useTheme();\n//   const colors = tokens(theme.palette.mode);\n\n//   return (\n//     <ResponsiveBar\n//       data={data}\n//       theme={{\n//         // added\n//         axis: {\n//           domain: {\n//             line: {\n//               stroke: colors.grey[100],\n//             },\n//           },\n//           legend: {\n//             text: {\n//               fill: colors.grey[100],\n//             },\n//           },\n//           ticks: {\n//             line: {\n//               stroke: colors.grey[100],\n//               strokeWidth: 1,\n//             },\n//             text: {\n//               fill: colors.grey[100],\n//             },\n//           },\n//         },\n//         legends: {\n//           text: {\n//             fill: colors.grey[100],\n//           },\n//         },\n//       }}\n//       keys={[\"TrippingCount\"]}\n//       indexBy=\"id\"\n//       margin={{ top: 50, right: 130, bottom: 50, left: 60 }}\n//       padding={0.3}\n//       valueScale={{ type: \"linear\" }}\n//       indexScale={{ type: \"band\", round: true }}\n//       colors={{ scheme: \"nivo\" }}\n//       defs={[\n//         {\n//           id: \"dots\",\n//           type: \"patternDots\",\n//           background: \"inherit\",\n//           color: \"#38bcb2\",\n//           size: 4,\n//           padding: 1,\n//           stagger: true,\n//         },\n//         {\n//           id: \"lines\",\n//           type: \"patternLines\",\n//           background: \"inherit\",\n//           color: \"#eed312\",\n//           rotation: -45,\n//           lineWidth: 6,\n//           spacing: 10,\n//         },\n//       ]}\n//       borderColor={{\n//         from: \"color\",\n//         modifiers: [[\"darker\", \"1.6\"]],\n//       }}\n//       axisTop={null}\n//       axisRight={null}\n//       axisBottom={{\n//         tickSize: 5,\n//         tickPadding: 5,\n//         tickRotation: 0,\n//         legend: \"Circle\",\n//         legendPosition: \"middle\",\n//         legendOffset: 32,\n//       }}\n//       axisLeft={{\n//         tickSize: 5,\n//         tickPadding: 5,\n//         tickRotation: 0,\n//         legend:  \"TrippingCount\", // changed\n//         legendPosition: \"middle\",\n//         legendOffset: -40,\n//       }}\n//       enableLabel={false}\n//       labelSkipWidth={12}\n//       labelSkipHeight={12}\n//       labelTextColor={{\n//         from: \"color\",\n//         modifiers: [[\"darker\", 1.6]],\n//       }}\n//       legends={[\n//         {\n//           dataFrom: \"keys\",\n//           anchor: \"bottom-right\",\n//           direction: \"column\",\n//           justify: false,\n//           translateX: 120,\n//           translateY: 0,\n//           itemsSpacing: 2,\n//           itemWidth: 100,\n//           itemHeight: 20,\n//           itemDirection: \"left-to-right\",\n//           itemOpacity: 0.85,\n//           symbolSize: 20,\n//           effects: [\n//             {\n//               on: \"hover\",\n//               style: {\n//                 itemOpacity: 1,\n//               },\n//             },\n//           ],\n//         },\n//       ]}\n//       role=\"application\"\n//       barAriaLabel={function (e) {\n//         return e.id + \": \" + e.formattedValue + \" in country: \" + e.indexValue;\n//       }}\n//     />\n//   );\n// };\n\n// export default BarChart;\nvar _c;\n$RefreshReg$(_c, \"BarChart\");","map":{"version":3,"names":["useTheme","ResponsiveBar","tokens","mockDataContacts","data","React","Component","useState","useEffect","Bar","Axios","BarChart","tbs","settbs","get","then","response","console","log","labels","Object","keys","datasets","axis","label","values","fill","backgroundColor","borderColor","borderWidth","options","indexAxis","elements","bar","responsive","plugins","legend","position","display","title","text"],"sources":["C:/Users/20338783/Desktop/React/hvpnl-dash/hvpnl/src/components/BarChart.jsx"],"sourcesContent":["import { useTheme } from \"@mui/material\";\r\nimport { ResponsiveBar } from \"@nivo/bar\";\r\nimport { tokens } from \"../theme\";\r\nimport { mockDataContacts as data } from \"../data/mockData\";\r\nimport React, { Component, useState, useEffect } from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\n\r\nimport Axios from \"axios\"; //axios library to make requests to api\r\n\r\n// Chart.defaults.global.defaultFontFamily = \"Roboto, sans-serif\";\r\nfunction BarChart() {\r\n  //retrieving data from api\r\n  const [tbs, settbs] = useState([]);\r\n  useEffect(() => {\r\n    Axios.get(\"http://localhost:3001/tb\").then((response) => {\r\n      settbs(response.data);\r\n      console.log(response.data);\r\n    });\r\n  }, []);\r\n\r\n    const data = {\r\n        labels: Object.keys(tbs),\r\n        datasets: [\r\n          {\r\n            axis: \"y\",\r\n            label: \"My First Dataset\",\r\n            data: Object.values(tbs),\r\n            fill: false,\r\n           backgroundColor: [\r\n          \"rgba(255, 99, 132, 0.2)\",\r\n          \"rgba(255, 159, 64, 0.2)\",\r\n          \"rgba(255, 205, 86, 0.2)\",\r\n          \"rgba(75, 192, 192, 0.2)\",\r\n          \"rgba(54, 162, 235, 0.2)\",\r\n          \"rgba(153, 102, 255, 0.2)\",\r\n          \"rgba(201, 203, 207, 0.2)\",\r\n        ],\r\n        borderColor: [\r\n          \"rgb(255, 99, 132)\",\r\n          \"rgb(255, 159, 64)\",\r\n          \"rgb(255, 205, 86)\",\r\n          \"rgb(75, 192, 192)\",\r\n          \"rgb(54, 162, 235)\",\r\n          \"rgb(153, 102, 255)\",\r\n          \"rgb(201, 203, 207)\",\r\n        ],\r\n        borderWidth: 1,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    indexAxis: \"y\",\r\n    // Elements options apply to all of the options unless overridden in a dataset\r\n    // In this case, we are setting the border of each horizontal bar to be 2px wide\r\n    elements: {\r\n      bar: {\r\n        borderWidth: 2,\r\n      },\r\n    },\r\n    responsive: true,\r\n    plugins: {\r\n      legend: {\r\n        position: \"right\",\r\n        display: false,\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: \"Chart.js Horizontal Bar Chart\",\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Bar data={data} options={options} /> {/* Props */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BarChart;\r\n\r\n\r\n// // const BarChart = ({ isDashboard = false }) => {\r\n//   const theme = useTheme();\r\n//   const colors = tokens(theme.palette.mode);\r\n\r\n//   return (\r\n//     <ResponsiveBar\r\n//       data={data}\r\n//       theme={{\r\n//         // added\r\n//         axis: {\r\n//           domain: {\r\n//             line: {\r\n//               stroke: colors.grey[100],\r\n//             },\r\n//           },\r\n//           legend: {\r\n//             text: {\r\n//               fill: colors.grey[100],\r\n//             },\r\n//           },\r\n//           ticks: {\r\n//             line: {\r\n//               stroke: colors.grey[100],\r\n//               strokeWidth: 1,\r\n//             },\r\n//             text: {\r\n//               fill: colors.grey[100],\r\n//             },\r\n//           },\r\n//         },\r\n//         legends: {\r\n//           text: {\r\n//             fill: colors.grey[100],\r\n//           },\r\n//         },\r\n//       }}\r\n//       keys={[\"TrippingCount\"]}\r\n//       indexBy=\"id\"\r\n//       margin={{ top: 50, right: 130, bottom: 50, left: 60 }}\r\n//       padding={0.3}\r\n//       valueScale={{ type: \"linear\" }}\r\n//       indexScale={{ type: \"band\", round: true }}\r\n//       colors={{ scheme: \"nivo\" }}\r\n//       defs={[\r\n//         {\r\n//           id: \"dots\",\r\n//           type: \"patternDots\",\r\n//           background: \"inherit\",\r\n//           color: \"#38bcb2\",\r\n//           size: 4,\r\n//           padding: 1,\r\n//           stagger: true,\r\n//         },\r\n//         {\r\n//           id: \"lines\",\r\n//           type: \"patternLines\",\r\n//           background: \"inherit\",\r\n//           color: \"#eed312\",\r\n//           rotation: -45,\r\n//           lineWidth: 6,\r\n//           spacing: 10,\r\n//         },\r\n//       ]}\r\n//       borderColor={{\r\n//         from: \"color\",\r\n//         modifiers: [[\"darker\", \"1.6\"]],\r\n//       }}\r\n//       axisTop={null}\r\n//       axisRight={null}\r\n//       axisBottom={{\r\n//         tickSize: 5,\r\n//         tickPadding: 5,\r\n//         tickRotation: 0,\r\n//         legend: \"Circle\",\r\n//         legendPosition: \"middle\",\r\n//         legendOffset: 32,\r\n//       }}\r\n//       axisLeft={{\r\n//         tickSize: 5,\r\n//         tickPadding: 5,\r\n//         tickRotation: 0,\r\n//         legend:  \"TrippingCount\", // changed\r\n//         legendPosition: \"middle\",\r\n//         legendOffset: -40,\r\n//       }}\r\n//       enableLabel={false}\r\n//       labelSkipWidth={12}\r\n//       labelSkipHeight={12}\r\n//       labelTextColor={{\r\n//         from: \"color\",\r\n//         modifiers: [[\"darker\", 1.6]],\r\n//       }}\r\n//       legends={[\r\n//         {\r\n//           dataFrom: \"keys\",\r\n//           anchor: \"bottom-right\",\r\n//           direction: \"column\",\r\n//           justify: false,\r\n//           translateX: 120,\r\n//           translateY: 0,\r\n//           itemsSpacing: 2,\r\n//           itemWidth: 100,\r\n//           itemHeight: 20,\r\n//           itemDirection: \"left-to-right\",\r\n//           itemOpacity: 0.85,\r\n//           symbolSize: 20,\r\n//           effects: [\r\n//             {\r\n//               on: \"hover\",\r\n//               style: {\r\n//                 itemOpacity: 1,\r\n//               },\r\n//             },\r\n//           ],\r\n//         },\r\n//       ]}\r\n//       role=\"application\"\r\n//       barAriaLabel={function (e) {\r\n//         return e.id + \": \" + e.formattedValue + \" in country: \" + e.indexValue;\r\n//       }}\r\n//     />\r\n//   );\r\n// };\r\n\r\n// export default BarChart;"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,eAAe;AACxC,SAASC,aAAa,QAAQ,WAAW;AACzC,SAASC,MAAM,QAAQ,UAAU;AACjC,SAASC,gBAAgB,IAAIC,IAAI,QAAQ,kBAAkB;AAC3D,OAAOC,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7D,SAASC,GAAG,QAAQ,iBAAiB;AAErC,OAAOC,KAAK,MAAM,OAAO,CAAC,CAAC;;AAE3B;AAAA;AACA,SAASC,QAAQ,GAAG;EAAA;EAClB;EACA,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAClCC,SAAS,CAAC,MAAM;IACdE,KAAK,CAACI,GAAG,CAAC,0BAA0B,CAAC,CAACC,IAAI,CAAEC,QAAQ,IAAK;MACvDH,MAAM,CAACG,QAAQ,CAACZ,IAAI,CAAC;MACrBa,OAAO,CAACC,GAAG,CAACF,QAAQ,CAACZ,IAAI,CAAC;IAC5B,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEJ,MAAMA,IAAI,GAAG;IACTe,MAAM,EAAEC,MAAM,CAACC,IAAI,CAACT,GAAG,CAAC;IACxBU,QAAQ,EAAE,CACR;MACEC,IAAI,EAAE,GAAG;MACTC,KAAK,EAAE,kBAAkB;MACzBpB,IAAI,EAAEgB,MAAM,CAACK,MAAM,CAACb,GAAG,CAAC;MACxBc,IAAI,EAAE,KAAK;MACZC,eAAe,EAAE,CAClB,yBAAyB,EACzB,yBAAyB,EACzB,yBAAyB,EACzB,yBAAyB,EACzB,yBAAyB,EACzB,0BAA0B,EAC1B,0BAA0B,CAC3B;MACDC,WAAW,EAAE,CACX,mBAAmB,EACnB,mBAAmB,EACnB,mBAAmB,EACnB,mBAAmB,EACnB,mBAAmB,EACnB,oBAAoB,EACpB,oBAAoB,CACrB;MACDC,WAAW,EAAE;IACf,CAAC;EAEL,CAAC;EAED,MAAMC,OAAO,GAAG;IACdC,SAAS,EAAE,GAAG;IACd;IACA;IACAC,QAAQ,EAAE;MACRC,GAAG,EAAE;QACHJ,WAAW,EAAE;MACf;IACF,CAAC;IACDK,UAAU,EAAE,IAAI;IAChBC,OAAO,EAAE;MACPC,MAAM,EAAE;QACNC,QAAQ,EAAE,OAAO;QACjBC,OAAO,EAAE;MACX,CAAC;MACDC,KAAK,EAAE;QACLD,OAAO,EAAE,IAAI;QACbE,IAAI,EAAE;MACR;IACF;EACF,CAAC;EAED,oBACE;IAAA,wBACE,QAAC,GAAG;MAAC,IAAI,EAAEpC,IAAK;MAAC,OAAO,EAAE0B;IAAQ;MAAA;MAAA;MAAA;IAAA,QAAG,KAAC;EAAA;IAAA;IAAA;IAAA;EAAA,QAClC;AAEV;AAAC,GApEQnB,QAAQ;AAAA,KAARA,QAAQ;AAsEjB,eAAeA,QAAQ;;AAGv},"metadata":{},"sourceType":"module","externalDependencies":[]}