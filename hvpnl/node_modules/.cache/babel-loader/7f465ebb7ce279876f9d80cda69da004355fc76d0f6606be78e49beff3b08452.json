{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\20338783\\\\Desktop\\\\React\\\\hvpnl-dash\\\\hvpnl\\\\src\\\\scenes\\\\damagedTransformer\\\\index.jsx\",\n  _s = $RefreshSig$();\nimport { Box } from \"@mui/material\";\nimport { DataGrid, GridToolbar } from \"@mui/x-data-grid\";\nimport { tokens } from \"../../theme\";\nimport Header from \"../../components/Header\";\nimport { useTheme } from \"@mui/material\";\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  field: \"voltagelevel\",\n  headerName: \"Voltage Level (KV)\",\n  flex: 2.5\n}, {\n  field: \"ckt\",\n  headerName: \"Circuit (KM)\",\n  flex: 2.5\n}, {\n  field: \"nolines\",\n  headerName: \"No of Lines\",\n  flex: 2.5\n}];\nconst DamagedTransformer = () => {\n  _s();\n  const theme = useTheme();\n  const colors = tokens(theme.palette.mode);\n\n  //   const[tableData,setTableData] = useState([]);\n  //   useEffect(()=> {\n  //     try {\n  //       const response = fetch(\"http://localhost:3001/tb\");\n  //       const jsonData = response.json();\n  //       console.log(jsonData);\n  //       setTableData(jsonData);\n  //     }catch(err){\n  //       console.error(err.message);\n  //     }\n  //   },[])\n  // console.log(tableData)\n  const [tableData, setTableData] = useState([]);\n  const gettb = async () => {\n    try {\n      const data = await axios.get(\"http://localhost:3001/tb\");\n      console.log(data.data);\n      setTableData(data.data);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  useEffect(() => {\n    gettb();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    m: \"20px\",\n    children: /*#__PURE__*/_jsxDEV(Header, {\n      title: \"DAMAGED TRANSFORMER \",\n      subtitle: \"Damaged Transformer  Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(DamagedTransformer, \"8kNNxooYHt2GOqOrBLiIpDHhxLg=\", false, function () {\n  return [useTheme];\n});\n_c = DamagedTransformer;\nexport default DamagedTransformer;\nvar _c;\n$RefreshReg$(_c, \"DamagedTransformer\");","map":{"version":3,"names":["Box","DataGrid","GridToolbar","tokens","Header","useTheme","useState","useEffect","axios","columns","field","headerName","flex","DamagedTransformer","theme","colors","palette","mode","tableData","setTableData","gettb","data","get","console","log","e"],"sources":["C:/Users/20338783/Desktop/React/hvpnl-dash/hvpnl/src/scenes/damagedTransformer/index.jsx"],"sourcesContent":["import { Box } from \"@mui/material\";\r\nimport { DataGrid, GridToolbar } from \"@mui/x-data-grid\";\r\nimport { tokens } from \"../../theme\";\r\nimport Header from \"../../components/Header\";\r\nimport { useTheme } from \"@mui/material\";\r\nimport { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\n\r\nconst columns = [\r\n  { field: \"voltagelevel\", headerName: \"Voltage Level (KV)\", flex: 2.5 },\r\n  { field: \"ckt\", headerName: \"Circuit (KM)\" , flex:2.5},\r\n  {\r\n    field: \"nolines\",\r\n    headerName: \"No of Lines\",\r\n    flex: 2.5,\r\n  }, \r\n];\r\n\r\n\r\nconst DamagedTransformer = () => {\r\n  const theme = useTheme();\r\n  const colors = tokens(theme.palette.mode);\r\n\r\n//   const[tableData,setTableData] = useState([]);\r\n//   useEffect(()=> {\r\n//     try {\r\n//       const response = fetch(\"http://localhost:3001/tb\");\r\n//       const jsonData = response.json();\r\n//       console.log(jsonData);\r\n//       setTableData(jsonData);\r\n//     }catch(err){\r\n//       console.error(err.message);\r\n//     }\r\n//   },[])\r\n// console.log(tableData)\r\nconst[tableData,setTableData] = useState([]);\r\n\r\nconst gettb= async () => {\r\ntry{\r\nconst data = await axios.get(\"http://localhost:3001/tb\");\r\nconsole.log(data.data);\r\nsetTableData(data.data);\r\n} catch (e) {\r\n  console.log(e);\r\n}\r\n};\r\nuseEffect(()=>{\r\n  gettb();\r\n},[]);\r\n\r\n\r\n  return (\r\n    <Box m=\"20px\">\r\n      <Header\r\n        title=\"DAMAGED TRANSFORMER \"\r\n        subtitle=\"Damaged Transformer  Details\"\r\n      />\r\n    \r\n        {/* <DataGrid\r\n          rows={tableData}\r\n          columns={columns}\r\n          components={{ Toolbar: GridToolbar }}\r\n          \r\n        /> */}\r\n        {/* </Box>\r\n      <Box m=\"10px\">\r\n      <Header title=\"DAMAGED TRANSFORMERS\" subtitle=\"Analytics for Damaged Transformers\"/>\r\n      <Box height=\"75vh\">\r\n        <Box  display=\"grid\"\r\n            gridTemplateColumns=\"repeat(12, 1fr)\"\r\n            gridAutoRows=\"440px\"\r\n            gap=\"10px\">\r\n\r\n        <Box\r\n        gridColumn=\"span 6\"\r\n        display=\"flex\"\r\n        alignItems=\"center\"\r\n        justifyContent=\"center\"\r\n    >\r\n          <ResponsiveBar\r\n        data={mockDataDamagetrans}\r\n        theme={{\r\n          // added\r\n          axis: {\r\n            domain: {\r\n              line: {\r\n                stroke: colors.grey[100],\r\n              },\r\n            },\r\n            legend: {\r\n              text: {\r\n                fill: colors.grey[100],\r\n              },\r\n            },\r\n            ticks: {\r\n              line: {\r\n                stroke: colors.grey[100],\r\n                strokeWidth: 1,\r\n              },\r\n              text: {\r\n                fill: colors.grey[100],\r\n              },\r\n            },\r\n          },\r\n          legends: {\r\n            text: {\r\n              fill: colors.grey[100],\r\n            },\r\n          },\r\n        }}\r\n        keys={[\"TotalOutageT\"]}\r\n        indexBy=\"id\"\r\n        margin={{ top: 50, right: 130, bottom: 50, left: 60 }}\r\n        padding={0.3}\r\n        valueScale={{ type: \"linear\" }}\r\n        indexScale={{ type: \"band\", round: true }}\r\n        colors={{ scheme: \"nivo\" }}\r\n        defs={[\r\n          {\r\n            id: \"dots\",\r\n            type: \"patternDots\",\r\n            background: \"inherit\",\r\n            color: \"#38bcb2\",\r\n            size: 4,\r\n            padding: 1,\r\n            stagger: true,\r\n          },\r\n          {\r\n            id: \"lines\",\r\n            type: \"patternLines\",\r\n            background: \"inherit\",\r\n            color: \"#eed312\",\r\n            rotation: -45,\r\n            lineWidth: 6,\r\n            spacing: 10,\r\n          },\r\n        ]}\r\n        borderColor={{\r\n          from: \"color\",\r\n          modifiers: [[\"darker\", \"1.6\"]],\r\n        }}\r\n        axisTop={null}\r\n        axisRight={null}\r\n        axisBottom={{\r\n          tickSize: 5,\r\n          tickPadding: 5,\r\n          tickRotation: 0,\r\n          legend: isDashboard ? undefined : \"Circle\", // changed\r\n          legendPosition: \"middle\",\r\n          legendOffset: 32,\r\n        }}\r\n        axisLeft={{\r\n          tickSize: 5,\r\n          tickPadding: 5,\r\n          tickRotation: 0,\r\n          legend: isDashboard ? undefined : \"Damage Rate\", // changed\r\n          legendPosition: \"middle\",\r\n          legendOffset: -40,\r\n        }}\r\n        enableLabel={false}\r\n        labelSkipWidth={12}\r\n        labelSkipHeight={12}\r\n        labelTextColor={{\r\n          from: \"color\",\r\n          modifiers: [[\"darker\", 1.6]],\r\n        }}\r\n        legends={[\r\n          {\r\n            dataFrom: \"keys\",\r\n            anchor: \"bottom-right\",\r\n            direction: \"column\",\r\n            justify: false,\r\n            translateX: 120,\r\n            translateY: 0,\r\n            itemsSpacing: 2,\r\n            itemWidth: 100,\r\n            itemHeight: 20,\r\n            itemDirection: \"left-to-right\",\r\n            itemOpacity: 0.85,\r\n            symbolSize: 20,\r\n            effects: [\r\n              {\r\n                on: \"hover\",\r\n                style: {\r\n                  itemOpacity: 1,\r\n                },\r\n              },\r\n            ],\r\n          },\r\n        ]}\r\n        role=\"application\"\r\n        barAriaLabel={function (e) {\r\n          return e.id + \": \" + e.formattedValue + \" in country: \" + e.indexValue;\r\n        }}\r\n      />\r\n\r\n          </Box>\r\n          </Box>\r\n        </Box> */}\r\n      </Box>\r\n  );\r\n};\r\n\r\nexport default DamagedTransformer;\r\n"],"mappings":";;AAAA,SAASA,GAAG,QAAQ,eAAe;AACnC,SAASC,QAAQ,EAAEC,WAAW,QAAQ,kBAAkB;AACxD,SAASC,MAAM,QAAQ,aAAa;AACpC,OAAOC,MAAM,MAAM,yBAAyB;AAC5C,SAASC,QAAQ,QAAQ,eAAe;AACxC,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,OAAO;AAAC;AAG1B,MAAMC,OAAO,GAAG,CACd;EAAEC,KAAK,EAAE,cAAc;EAAEC,UAAU,EAAE,oBAAoB;EAAEC,IAAI,EAAE;AAAI,CAAC,EACtE;EAAEF,KAAK,EAAE,KAAK;EAAEC,UAAU,EAAE,cAAc;EAAGC,IAAI,EAAC;AAAG,CAAC,EACtD;EACEF,KAAK,EAAE,SAAS;EAChBC,UAAU,EAAE,aAAa;EACzBC,IAAI,EAAE;AACR,CAAC,CACF;AAGD,MAAMC,kBAAkB,GAAG,MAAM;EAAA;EAC/B,MAAMC,KAAK,GAAGT,QAAQ,EAAE;EACxB,MAAMU,MAAM,GAAGZ,MAAM,CAACW,KAAK,CAACE,OAAO,CAACC,IAAI,CAAC;;EAE3C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAAK,CAACC,SAAS,EAACC,YAAY,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMc,KAAK,GAAE,YAAY;IACzB,IAAG;MACH,MAAMC,IAAI,GAAG,MAAMb,KAAK,CAACc,GAAG,CAAC,0BAA0B,CAAC;MACxDC,OAAO,CAACC,GAAG,CAACH,IAAI,CAACA,IAAI,CAAC;MACtBF,YAAY,CAACE,IAAI,CAACA,IAAI,CAAC;IACvB,CAAC,CAAC,OAAOI,CAAC,EAAE;MACVF,OAAO,CAACC,GAAG,CAACC,CAAC,CAAC;IAChB;EACA,CAAC;EACDlB,SAAS,CAAC,MAAI;IACZa,KAAK,EAAE;EACT,CAAC,EAAC,EAAE,CAAC;EAGH,oBACE,QAAC,GAAG;IAAC,CAAC,EAAC,MAAM;IAAA,uBACX,QAAC,MAAM;MACL,KAAK,EAAC,sBAAsB;MAC5B,QAAQ,EAAC;IAA8B;MAAA;MAAA;MAAA;IAAA;EACvC;IAAA;IAAA;IAAA;EAAA,QA+II;AAEZ,CAAC;AAAC,GAtLIP,kBAAkB;EAAA,QACRR,QAAQ;AAAA;AAAA,KADlBQ,kBAAkB;AAwLxB,eAAeA,kBAAkB;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}