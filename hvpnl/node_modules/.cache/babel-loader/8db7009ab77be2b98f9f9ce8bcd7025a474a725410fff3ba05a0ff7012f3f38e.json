{"ast":null,"code":"import _regeneratorRuntime from \"E:/hvpnl-dash2/hvpnl/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"E:/hvpnl-dash2/hvpnl/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _toConsumableArray from \"E:/hvpnl-dash2/hvpnl/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { ownerDocument } from '@mui/material/utils';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridVisibleRowCountSelector } from '../filter/gridFilterSelector';\nimport { gridColumnDefinitionsSelector, gridColumnVisibilityModelSelector } from '../columns/gridColumnsSelector';\nimport { gridDensityTotalHeaderHeightSelector } from '../density/densitySelector';\nimport { gridClasses } from '../../../constants/gridClasses';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { getColumnsToExport } from './utils';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { GridPrintExportMenuItem } from '../../../components/toolbar/GridToolbarExport';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\n/**\n * @requires useGridColumns (state)\n * @requires useGridFilter (state)\n * @requires useGridSorting (state)\n * @requires useGridParamsApi (method)\n */\nexport var useGridPrintExport = function useGridPrintExport(apiRef, props) {\n  var logger = useGridLogger(apiRef, 'useGridPrintExport');\n  var doc = React.useRef(null);\n  var previousGridState = React.useRef(null);\n  var previousColumnVisibility = React.useRef({});\n  React.useEffect(function () {\n    doc.current = ownerDocument(apiRef.current.rootElementRef.current);\n  }, [apiRef]); // Returns a promise because updateColumns triggers state update and\n  // the new state needs to be in place before the grid can be sized correctly\n\n  var updateGridColumnsForPrint = React.useCallback(function (fields, allColumns) {\n    return new Promise(function (resolve) {\n      if (!fields && !allColumns) {\n        resolve();\n        return;\n      }\n      var exportedColumnFields = getColumnsToExport({\n        apiRef: apiRef,\n        options: {\n          fields: fields,\n          allColumns: allColumns\n        }\n      }).map(function (column) {\n        return column.field;\n      });\n      var columns = gridColumnDefinitionsSelector(apiRef);\n      var newColumnVisibilityModel = {};\n      columns.forEach(function (column) {\n        newColumnVisibilityModel[column.field] = exportedColumnFields.includes(column.field);\n      });\n      apiRef.current.setColumnVisibilityModel(newColumnVisibilityModel);\n      resolve();\n    });\n  }, [apiRef]);\n  var buildPrintWindow = React.useCallback(function (title) {\n    var iframeEl = document.createElement('iframe');\n    iframeEl.id = 'grid-print-window'; // Without this 'onload' event won't fire in some browsers\n\n    iframeEl.src = window.location.href;\n    iframeEl.style.position = 'absolute';\n    iframeEl.style.width = '0px';\n    iframeEl.style.height = '0px';\n    iframeEl.title = title || document.title;\n    return iframeEl;\n  }, []);\n  var handlePrintWindowLoad = React.useCallback(function (printWindow, options) {\n    var _printWindow$contentW, _querySelector, _querySelector2;\n    var normalizeOptions = _extends({\n      copyStyles: true,\n      hideToolbar: false,\n      hideFooter: false\n    }, options); // Some agents, such as IE11 and Enzyme (as of 2 Jun 2020) continuously call the\n    // `onload` callback. This ensures that it is only called once.\n\n    printWindow.onload = null;\n    var printDoc = printWindow.contentDocument || ((_printWindow$contentW = printWindow.contentWindow) == null ? void 0 : _printWindow$contentW.document);\n    if (!printDoc) {\n      return;\n    }\n    var totalHeaderHeight = gridDensityTotalHeaderHeightSelector(apiRef);\n    var rowsMeta = gridRowsMetaSelector(apiRef.current.state);\n    var gridRootElement = apiRef.current.rootElementRef.current;\n    var gridClone = gridRootElement.cloneNode(true);\n    var gridCloneViewport = gridClone.querySelector(\".\".concat(gridClasses.virtualScroller)); // Expand the viewport window to prevent clipping\n\n    gridCloneViewport.style.height = 'auto';\n    gridCloneViewport.style.width = 'auto';\n    gridCloneViewport.parentElement.style.width = 'auto';\n    gridCloneViewport.parentElement.style.height = 'auto'; // Allow to overflow to not hide the border of the last row\n\n    var gridMain = gridClone.querySelector(\".\".concat(gridClasses.main));\n    gridMain.style.overflow = 'visible';\n    var columnHeaders = gridClone.querySelector(\".\".concat(gridClasses.columnHeaders));\n    var columnHeadersInner = columnHeaders.querySelector(\".\".concat(gridClasses.columnHeadersInner));\n    columnHeadersInner.style.width = '100%';\n    var gridToolbarElementHeight = ((_querySelector = gridRootElement.querySelector(\".\".concat(gridClasses.toolbarContainer))) == null ? void 0 : _querySelector.clientHeight) || 0;\n    var gridFooterElementHeight = ((_querySelector2 = gridRootElement.querySelector(\".\".concat(gridClasses.footerContainer))) == null ? void 0 : _querySelector2.clientHeight) || 0;\n    if (normalizeOptions.hideToolbar) {\n      var _gridClone$querySelec;\n      (_gridClone$querySelec = gridClone.querySelector(\".\".concat(gridClasses.toolbarContainer))) == null ? void 0 : _gridClone$querySelec.remove();\n      gridToolbarElementHeight = 0;\n    }\n    if (normalizeOptions.hideFooter) {\n      var _gridClone$querySelec2;\n      (_gridClone$querySelec2 = gridClone.querySelector(\".\".concat(gridClasses.footerContainer))) == null ? void 0 : _gridClone$querySelec2.remove();\n      gridFooterElementHeight = 0;\n    } // Expand container height to accommodate all rows\n\n    gridClone.style.height = \"\".concat(rowsMeta.currentPageTotalHeight + totalHeaderHeight + gridToolbarElementHeight + gridFooterElementHeight, \"px\"); // Remove all loaded elements from the current host\n\n    printDoc.body.innerHTML = '';\n    printDoc.body.appendChild(gridClone);\n    var defaultPageStyle = typeof normalizeOptions.pageStyle === 'function' ? normalizeOptions.pageStyle() : normalizeOptions.pageStyle;\n    if (typeof defaultPageStyle === 'string') {\n      // TODO custom styles should always win\n      var styleElement = printDoc.createElement('style');\n      styleElement.appendChild(printDoc.createTextNode(defaultPageStyle));\n      printDoc.head.appendChild(styleElement);\n    }\n    if (normalizeOptions.bodyClassName) {\n      var _printDoc$body$classL;\n      (_printDoc$body$classL = printDoc.body.classList).add.apply(_printDoc$body$classL, _toConsumableArray(normalizeOptions.bodyClassName.split(' ')));\n    }\n    if (normalizeOptions.copyStyles) {\n      var headStyleElements = doc.current.querySelectorAll(\"style, link[rel='stylesheet']\");\n      for (var i = 0; i < headStyleElements.length; i += 1) {\n        var node = headStyleElements[i];\n        if (node.tagName === 'STYLE') {\n          var newHeadStyleElements = printDoc.createElement(node.tagName);\n          var sheet = node.sheet;\n          if (sheet) {\n            var styleCSS = ''; // NOTE: for-of is not supported by IE\n\n            for (var j = 0; j < sheet.cssRules.length; j += 1) {\n              if (typeof sheet.cssRules[j].cssText === 'string') {\n                styleCSS += \"\".concat(sheet.cssRules[j].cssText, \"\\r\\n\");\n              }\n            }\n            newHeadStyleElements.appendChild(printDoc.createTextNode(styleCSS));\n            printDoc.head.appendChild(newHeadStyleElements);\n          }\n        } else if (node.getAttribute('href')) {\n          // If `href` tag is empty, avoid loading these links\n          var _newHeadStyleElements = printDoc.createElement(node.tagName);\n          for (var _j = 0; _j < node.attributes.length; _j += 1) {\n            var attr = node.attributes[_j];\n            if (attr) {\n              _newHeadStyleElements.setAttribute(attr.nodeName, attr.nodeValue || '');\n            }\n          }\n          printDoc.head.appendChild(_newHeadStyleElements);\n        }\n      }\n    } // Trigger print\n\n    if (process.env.NODE_ENV !== 'test') {\n      printWindow.contentWindow.print();\n    }\n  }, [apiRef, doc]);\n  var handlePrintWindowAfterPrint = React.useCallback(function (printWindow) {\n    var _previousGridState$cu, _previousGridState$cu2;\n\n    // Remove the print iframe\n    doc.current.body.removeChild(printWindow); // Revert grid to previous state\n\n    apiRef.current.restoreState(previousGridState.current || {});\n    if (!((_previousGridState$cu = previousGridState.current) != null && (_previousGridState$cu2 = _previousGridState$cu.columns) != null && _previousGridState$cu2.columnVisibilityModel)) {\n      // if the apiRef.current.exportState(); did not exported the column visibility, we update it\n      apiRef.current.setColumnVisibilityModel(previousColumnVisibility.current);\n    }\n    apiRef.current.unstable_enableVirtualization(); // Clear local state\n\n    previousGridState.current = null;\n    previousColumnVisibility.current = {};\n  }, [apiRef]);\n  var exportDataAsPrint = React.useCallback( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(options) {\n      var visibleRowCount, printWindow;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            logger.debug(\"Export data as Print\");\n            if (apiRef.current.rootElementRef.current) {\n              _context.next = 3;\n              break;\n            }\n            throw new Error('MUI: No grid root element available.');\n          case 3:\n            previousGridState.current = apiRef.current.exportState(); // It appends that the visibility model is not exported, especially if columnVisibility is not controlled\n\n            previousColumnVisibility.current = gridColumnVisibilityModelSelector(apiRef);\n            if (props.pagination) {\n              visibleRowCount = gridVisibleRowCountSelector(apiRef);\n              apiRef.current.setPageSize(visibleRowCount);\n            }\n            _context.next = 8;\n            return updateGridColumnsForPrint(options == null ? void 0 : options.fields, options == null ? void 0 : options.allColumns);\n          case 8:\n            apiRef.current.unstable_disableVirtualization();\n            printWindow = buildPrintWindow(options == null ? void 0 : options.fileName);\n            doc.current.body.appendChild(printWindow);\n            if (process.env.NODE_ENV === 'test') {\n              // In test env, run the all pipeline without waiting for loading\n              handlePrintWindowLoad(printWindow, options);\n              handlePrintWindowAfterPrint(printWindow);\n            } else {\n              printWindow.onload = function () {\n                return handlePrintWindowLoad(printWindow, options);\n              };\n              printWindow.contentWindow.onafterprint = function () {\n                return handlePrintWindowAfterPrint(printWindow);\n              };\n            }\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }(), [props, logger, apiRef, buildPrintWindow, handlePrintWindowLoad, handlePrintWindowAfterPrint, updateGridColumnsForPrint]);\n  var printExportApi = {\n    exportDataAsPrint: exportDataAsPrint\n  };\n  useGridApiMethod(apiRef, printExportApi, 'GridPrintExportApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  var addExportMenuButtons = React.useCallback(function (initialValue, options) {\n    var _options$printOptions;\n    if ((_options$printOptions = options.printOptions) != null && _options$printOptions.disableToolbarButton) {\n      return initialValue;\n    }\n    return [].concat(_toConsumableArray(initialValue), [{\n      component: /*#__PURE__*/_jsx(GridPrintExportMenuItem, {\n        options: options.printOptions\n      }),\n      componentName: 'printExport'\n    }]);\n  }, []);\n  useGridRegisterPipeProcessor(apiRef, 'exportMenu', addExportMenuButtons);\n};","map":{"version":3,"names":["_extends","React","ownerDocument","useGridLogger","gridVisibleRowCountSelector","gridColumnDefinitionsSelector","gridColumnVisibilityModelSelector","gridDensityTotalHeaderHeightSelector","gridClasses","useGridApiMethod","gridRowsMetaSelector","getColumnsToExport","useGridRegisterPipeProcessor","GridPrintExportMenuItem","jsx","_jsx","useGridPrintExport","apiRef","props","logger","doc","useRef","previousGridState","previousColumnVisibility","useEffect","current","rootElementRef","updateGridColumnsForPrint","useCallback","fields","allColumns","Promise","resolve","exportedColumnFields","options","map","column","field","columns","newColumnVisibilityModel","forEach","includes","setColumnVisibilityModel","buildPrintWindow","title","iframeEl","document","createElement","id","src","window","location","href","style","position","width","height","handlePrintWindowLoad","printWindow","_printWindow$contentW","_querySelector","_querySelector2","normalizeOptions","copyStyles","hideToolbar","hideFooter","onload","printDoc","contentDocument","contentWindow","totalHeaderHeight","rowsMeta","state","gridRootElement","gridClone","cloneNode","gridCloneViewport","querySelector","virtualScroller","parentElement","gridMain","main","overflow","columnHeaders","columnHeadersInner","gridToolbarElementHeight","toolbarContainer","clientHeight","gridFooterElementHeight","footerContainer","_gridClone$querySelec","remove","_gridClone$querySelec2","currentPageTotalHeight","body","innerHTML","appendChild","defaultPageStyle","pageStyle","styleElement","createTextNode","head","bodyClassName","classList","add","split","headStyleElements","querySelectorAll","i","length","node","tagName","newHeadStyleElements","sheet","styleCSS","j","cssRules","cssText","getAttribute","attributes","attr","setAttribute","nodeName","nodeValue","process","env","NODE_ENV","print","handlePrintWindowAfterPrint","_previousGridState$cu","_previousGridState$cu2","removeChild","restoreState","columnVisibilityModel","unstable_enableVirtualization","exportDataAsPrint","debug","Error","exportState","pagination","visibleRowCount","setPageSize","unstable_disableVirtualization","fileName","onafterprint","printExportApi","addExportMenuButtons","initialValue","_options$printOptions","printOptions","disableToolbarButton","component","componentName"],"sources":["E:/hvpnl-dash2/hvpnl/node_modules/@mui/x-data-grid/hooks/features/export/useGridPrintExport.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { ownerDocument } from '@mui/material/utils';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridVisibleRowCountSelector } from '../filter/gridFilterSelector';\nimport { gridColumnDefinitionsSelector, gridColumnVisibilityModelSelector } from '../columns/gridColumnsSelector';\nimport { gridDensityTotalHeaderHeightSelector } from '../density/densitySelector';\nimport { gridClasses } from '../../../constants/gridClasses';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { getColumnsToExport } from './utils';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { GridPrintExportMenuItem } from '../../../components/toolbar/GridToolbarExport';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\n/**\n * @requires useGridColumns (state)\n * @requires useGridFilter (state)\n * @requires useGridSorting (state)\n * @requires useGridParamsApi (method)\n */\nexport const useGridPrintExport = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridPrintExport');\n  const doc = React.useRef(null);\n  const previousGridState = React.useRef(null);\n  const previousColumnVisibility = React.useRef({});\n  React.useEffect(() => {\n    doc.current = ownerDocument(apiRef.current.rootElementRef.current);\n  }, [apiRef]); // Returns a promise because updateColumns triggers state update and\n  // the new state needs to be in place before the grid can be sized correctly\n\n  const updateGridColumnsForPrint = React.useCallback((fields, allColumns) => new Promise(resolve => {\n    if (!fields && !allColumns) {\n      resolve();\n      return;\n    }\n\n    const exportedColumnFields = getColumnsToExport({\n      apiRef,\n      options: {\n        fields,\n        allColumns\n      }\n    }).map(column => column.field);\n    const columns = gridColumnDefinitionsSelector(apiRef);\n    const newColumnVisibilityModel = {};\n    columns.forEach(column => {\n      newColumnVisibilityModel[column.field] = exportedColumnFields.includes(column.field);\n    });\n    apiRef.current.setColumnVisibilityModel(newColumnVisibilityModel);\n    resolve();\n  }), [apiRef]);\n  const buildPrintWindow = React.useCallback(title => {\n    const iframeEl = document.createElement('iframe');\n    iframeEl.id = 'grid-print-window'; // Without this 'onload' event won't fire in some browsers\n\n    iframeEl.src = window.location.href;\n    iframeEl.style.position = 'absolute';\n    iframeEl.style.width = '0px';\n    iframeEl.style.height = '0px';\n    iframeEl.title = title || document.title;\n    return iframeEl;\n  }, []);\n  const handlePrintWindowLoad = React.useCallback((printWindow, options) => {\n    var _printWindow$contentW, _querySelector, _querySelector2;\n\n    const normalizeOptions = _extends({\n      copyStyles: true,\n      hideToolbar: false,\n      hideFooter: false\n    }, options); // Some agents, such as IE11 and Enzyme (as of 2 Jun 2020) continuously call the\n    // `onload` callback. This ensures that it is only called once.\n\n\n    printWindow.onload = null;\n    const printDoc = printWindow.contentDocument || ((_printWindow$contentW = printWindow.contentWindow) == null ? void 0 : _printWindow$contentW.document);\n\n    if (!printDoc) {\n      return;\n    }\n\n    const totalHeaderHeight = gridDensityTotalHeaderHeightSelector(apiRef);\n    const rowsMeta = gridRowsMetaSelector(apiRef.current.state);\n    const gridRootElement = apiRef.current.rootElementRef.current;\n    const gridClone = gridRootElement.cloneNode(true);\n    const gridCloneViewport = gridClone.querySelector(`.${gridClasses.virtualScroller}`); // Expand the viewport window to prevent clipping\n\n    gridCloneViewport.style.height = 'auto';\n    gridCloneViewport.style.width = 'auto';\n    gridCloneViewport.parentElement.style.width = 'auto';\n    gridCloneViewport.parentElement.style.height = 'auto'; // Allow to overflow to not hide the border of the last row\n\n    const gridMain = gridClone.querySelector(`.${gridClasses.main}`);\n    gridMain.style.overflow = 'visible';\n    const columnHeaders = gridClone.querySelector(`.${gridClasses.columnHeaders}`);\n    const columnHeadersInner = columnHeaders.querySelector(`.${gridClasses.columnHeadersInner}`);\n    columnHeadersInner.style.width = '100%';\n    let gridToolbarElementHeight = ((_querySelector = gridRootElement.querySelector(`.${gridClasses.toolbarContainer}`)) == null ? void 0 : _querySelector.clientHeight) || 0;\n    let gridFooterElementHeight = ((_querySelector2 = gridRootElement.querySelector(`.${gridClasses.footerContainer}`)) == null ? void 0 : _querySelector2.clientHeight) || 0;\n\n    if (normalizeOptions.hideToolbar) {\n      var _gridClone$querySelec;\n\n      (_gridClone$querySelec = gridClone.querySelector(`.${gridClasses.toolbarContainer}`)) == null ? void 0 : _gridClone$querySelec.remove();\n      gridToolbarElementHeight = 0;\n    }\n\n    if (normalizeOptions.hideFooter) {\n      var _gridClone$querySelec2;\n\n      (_gridClone$querySelec2 = gridClone.querySelector(`.${gridClasses.footerContainer}`)) == null ? void 0 : _gridClone$querySelec2.remove();\n      gridFooterElementHeight = 0;\n    } // Expand container height to accommodate all rows\n\n\n    gridClone.style.height = `${rowsMeta.currentPageTotalHeight + totalHeaderHeight + gridToolbarElementHeight + gridFooterElementHeight}px`; // Remove all loaded elements from the current host\n\n    printDoc.body.innerHTML = '';\n    printDoc.body.appendChild(gridClone);\n    const defaultPageStyle = typeof normalizeOptions.pageStyle === 'function' ? normalizeOptions.pageStyle() : normalizeOptions.pageStyle;\n\n    if (typeof defaultPageStyle === 'string') {\n      // TODO custom styles should always win\n      const styleElement = printDoc.createElement('style');\n      styleElement.appendChild(printDoc.createTextNode(defaultPageStyle));\n      printDoc.head.appendChild(styleElement);\n    }\n\n    if (normalizeOptions.bodyClassName) {\n      printDoc.body.classList.add(...normalizeOptions.bodyClassName.split(' '));\n    }\n\n    if (normalizeOptions.copyStyles) {\n      const headStyleElements = doc.current.querySelectorAll(\"style, link[rel='stylesheet']\");\n\n      for (let i = 0; i < headStyleElements.length; i += 1) {\n        const node = headStyleElements[i];\n\n        if (node.tagName === 'STYLE') {\n          const newHeadStyleElements = printDoc.createElement(node.tagName);\n          const sheet = node.sheet;\n\n          if (sheet) {\n            let styleCSS = ''; // NOTE: for-of is not supported by IE\n\n            for (let j = 0; j < sheet.cssRules.length; j += 1) {\n              if (typeof sheet.cssRules[j].cssText === 'string') {\n                styleCSS += `${sheet.cssRules[j].cssText}\\r\\n`;\n              }\n            }\n\n            newHeadStyleElements.appendChild(printDoc.createTextNode(styleCSS));\n            printDoc.head.appendChild(newHeadStyleElements);\n          }\n        } else if (node.getAttribute('href')) {\n          // If `href` tag is empty, avoid loading these links\n          const newHeadStyleElements = printDoc.createElement(node.tagName);\n\n          for (let j = 0; j < node.attributes.length; j += 1) {\n            const attr = node.attributes[j];\n\n            if (attr) {\n              newHeadStyleElements.setAttribute(attr.nodeName, attr.nodeValue || '');\n            }\n          }\n\n          printDoc.head.appendChild(newHeadStyleElements);\n        }\n      }\n    } // Trigger print\n\n\n    if (process.env.NODE_ENV !== 'test') {\n      printWindow.contentWindow.print();\n    }\n  }, [apiRef, doc]);\n  const handlePrintWindowAfterPrint = React.useCallback(printWindow => {\n    var _previousGridState$cu, _previousGridState$cu2;\n\n    // Remove the print iframe\n    doc.current.body.removeChild(printWindow); // Revert grid to previous state\n\n    apiRef.current.restoreState(previousGridState.current || {});\n\n    if (!((_previousGridState$cu = previousGridState.current) != null && (_previousGridState$cu2 = _previousGridState$cu.columns) != null && _previousGridState$cu2.columnVisibilityModel)) {\n      // if the apiRef.current.exportState(); did not exported the column visibility, we update it\n      apiRef.current.setColumnVisibilityModel(previousColumnVisibility.current);\n    }\n\n    apiRef.current.unstable_enableVirtualization(); // Clear local state\n\n    previousGridState.current = null;\n    previousColumnVisibility.current = {};\n  }, [apiRef]);\n  const exportDataAsPrint = React.useCallback(async options => {\n    logger.debug(`Export data as Print`);\n\n    if (!apiRef.current.rootElementRef.current) {\n      throw new Error('MUI: No grid root element available.');\n    }\n\n    previousGridState.current = apiRef.current.exportState(); // It appends that the visibility model is not exported, especially if columnVisibility is not controlled\n\n    previousColumnVisibility.current = gridColumnVisibilityModelSelector(apiRef);\n\n    if (props.pagination) {\n      const visibleRowCount = gridVisibleRowCountSelector(apiRef);\n      apiRef.current.setPageSize(visibleRowCount);\n    }\n\n    await updateGridColumnsForPrint(options == null ? void 0 : options.fields, options == null ? void 0 : options.allColumns);\n    apiRef.current.unstable_disableVirtualization();\n    const printWindow = buildPrintWindow(options == null ? void 0 : options.fileName);\n    doc.current.body.appendChild(printWindow);\n\n    if (process.env.NODE_ENV === 'test') {\n      // In test env, run the all pipeline without waiting for loading\n      handlePrintWindowLoad(printWindow, options);\n      handlePrintWindowAfterPrint(printWindow);\n    } else {\n      printWindow.onload = () => handlePrintWindowLoad(printWindow, options);\n\n      printWindow.contentWindow.onafterprint = () => handlePrintWindowAfterPrint(printWindow);\n    }\n  }, [props, logger, apiRef, buildPrintWindow, handlePrintWindowLoad, handlePrintWindowAfterPrint, updateGridColumnsForPrint]);\n  const printExportApi = {\n    exportDataAsPrint\n  };\n  useGridApiMethod(apiRef, printExportApi, 'GridPrintExportApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const addExportMenuButtons = React.useCallback((initialValue, options) => {\n    var _options$printOptions;\n\n    if ((_options$printOptions = options.printOptions) != null && _options$printOptions.disableToolbarButton) {\n      return initialValue;\n    }\n\n    return [...initialValue, {\n      component: /*#__PURE__*/_jsx(GridPrintExportMenuItem, {\n        options: options.printOptions\n      }),\n      componentName: 'printExport'\n    }];\n  }, []);\n  useGridRegisterPipeProcessor(apiRef, 'exportMenu', addExportMenuButtons);\n};"],"mappings":";;;AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,aAAa,QAAQ,qBAAqB;AACnD,SAASC,aAAa,QAAQ,2BAA2B;AACzD,SAASC,2BAA2B,QAAQ,8BAA8B;AAC1E,SAASC,6BAA6B,EAAEC,iCAAiC,QAAQ,gCAAgC;AACjH,SAASC,oCAAoC,QAAQ,4BAA4B;AACjF,SAASC,WAAW,QAAQ,gCAAgC;AAC5D,SAASC,gBAAgB,QAAQ,8BAA8B;AAC/D,SAASC,oBAAoB,QAAQ,8BAA8B;AACnE,SAASC,kBAAkB,QAAQ,SAAS;AAC5C,SAASC,4BAA4B,QAAQ,2BAA2B;AACxE,SAASC,uBAAuB,QAAQ,+CAA+C;AACvF,SAASC,GAAG,IAAIC,IAAI,QAAQ,mBAAmB;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAkB,CAAIC,MAAM,EAAEC,KAAK,EAAK;EACnD,IAAMC,MAAM,GAAGhB,aAAa,CAACc,MAAM,EAAE,oBAAoB,CAAC;EAC1D,IAAMG,GAAG,GAAGnB,KAAK,CAACoB,MAAM,CAAC,IAAI,CAAC;EAC9B,IAAMC,iBAAiB,GAAGrB,KAAK,CAACoB,MAAM,CAAC,IAAI,CAAC;EAC5C,IAAME,wBAAwB,GAAGtB,KAAK,CAACoB,MAAM,CAAC,CAAC,CAAC,CAAC;EACjDpB,KAAK,CAACuB,SAAS,CAAC,YAAM;IACpBJ,GAAG,CAACK,OAAO,GAAGvB,aAAa,CAACe,MAAM,CAACQ,OAAO,CAACC,cAAc,CAACD,OAAO,CAAC;EACpE,CAAC,EAAE,CAACR,MAAM,CAAC,CAAC,CAAC,CAAC;EACd;;EAEA,IAAMU,yBAAyB,GAAG1B,KAAK,CAAC2B,WAAW,CAAC,UAACC,MAAM,EAAEC,UAAU;IAAA,OAAK,IAAIC,OAAO,CAAC,UAAAC,OAAO,EAAI;MACjG,IAAI,CAACH,MAAM,IAAI,CAACC,UAAU,EAAE;QAC1BE,OAAO,EAAE;QACT;MACF;MAEA,IAAMC,oBAAoB,GAAGtB,kBAAkB,CAAC;QAC9CM,MAAM,EAANA,MAAM;QACNiB,OAAO,EAAE;UACPL,MAAM,EAANA,MAAM;UACNC,UAAU,EAAVA;QACF;MACF,CAAC,CAAC,CAACK,GAAG,CAAC,UAAAC,MAAM;QAAA,OAAIA,MAAM,CAACC,KAAK;MAAA,EAAC;MAC9B,IAAMC,OAAO,GAAGjC,6BAA6B,CAACY,MAAM,CAAC;MACrD,IAAMsB,wBAAwB,GAAG,CAAC,CAAC;MACnCD,OAAO,CAACE,OAAO,CAAC,UAAAJ,MAAM,EAAI;QACxBG,wBAAwB,CAACH,MAAM,CAACC,KAAK,CAAC,GAAGJ,oBAAoB,CAACQ,QAAQ,CAACL,MAAM,CAACC,KAAK,CAAC;MACtF,CAAC,CAAC;MACFpB,MAAM,CAACQ,OAAO,CAACiB,wBAAwB,CAACH,wBAAwB,CAAC;MACjEP,OAAO,EAAE;IACX,CAAC,CAAC;EAAA,GAAE,CAACf,MAAM,CAAC,CAAC;EACb,IAAM0B,gBAAgB,GAAG1C,KAAK,CAAC2B,WAAW,CAAC,UAAAgB,KAAK,EAAI;IAClD,IAAMC,QAAQ,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;IACjDF,QAAQ,CAACG,EAAE,GAAG,mBAAmB,CAAC,CAAC;;IAEnCH,QAAQ,CAACI,GAAG,GAAGC,MAAM,CAACC,QAAQ,CAACC,IAAI;IACnCP,QAAQ,CAACQ,KAAK,CAACC,QAAQ,GAAG,UAAU;IACpCT,QAAQ,CAACQ,KAAK,CAACE,KAAK,GAAG,KAAK;IAC5BV,QAAQ,CAACQ,KAAK,CAACG,MAAM,GAAG,KAAK;IAC7BX,QAAQ,CAACD,KAAK,GAAGA,KAAK,IAAIE,QAAQ,CAACF,KAAK;IACxC,OAAOC,QAAQ;EACjB,CAAC,EAAE,EAAE,CAAC;EACN,IAAMY,qBAAqB,GAAGxD,KAAK,CAAC2B,WAAW,CAAC,UAAC8B,WAAW,EAAExB,OAAO,EAAK;IACxE,IAAIyB,qBAAqB,EAAEC,cAAc,EAAEC,eAAe;IAE1D,IAAMC,gBAAgB,GAAG9D,QAAQ,CAAC;MAChC+D,UAAU,EAAE,IAAI;MAChBC,WAAW,EAAE,KAAK;MAClBC,UAAU,EAAE;IACd,CAAC,EAAE/B,OAAO,CAAC,CAAC,CAAC;IACb;;IAGAwB,WAAW,CAACQ,MAAM,GAAG,IAAI;IACzB,IAAMC,QAAQ,GAAGT,WAAW,CAACU,eAAe,KAAK,CAACT,qBAAqB,GAAGD,WAAW,CAACW,aAAa,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGV,qBAAqB,CAACb,QAAQ,CAAC;IAEvJ,IAAI,CAACqB,QAAQ,EAAE;MACb;IACF;IAEA,IAAMG,iBAAiB,GAAG/D,oCAAoC,CAACU,MAAM,CAAC;IACtE,IAAMsD,QAAQ,GAAG7D,oBAAoB,CAACO,MAAM,CAACQ,OAAO,CAAC+C,KAAK,CAAC;IAC3D,IAAMC,eAAe,GAAGxD,MAAM,CAACQ,OAAO,CAACC,cAAc,CAACD,OAAO;IAC7D,IAAMiD,SAAS,GAAGD,eAAe,CAACE,SAAS,CAAC,IAAI,CAAC;IACjD,IAAMC,iBAAiB,GAAGF,SAAS,CAACG,aAAa,YAAKrE,WAAW,CAACsE,eAAe,EAAG,CAAC,CAAC;;IAEtFF,iBAAiB,CAACvB,KAAK,CAACG,MAAM,GAAG,MAAM;IACvCoB,iBAAiB,CAACvB,KAAK,CAACE,KAAK,GAAG,MAAM;IACtCqB,iBAAiB,CAACG,aAAa,CAAC1B,KAAK,CAACE,KAAK,GAAG,MAAM;IACpDqB,iBAAiB,CAACG,aAAa,CAAC1B,KAAK,CAACG,MAAM,GAAG,MAAM,CAAC,CAAC;;IAEvD,IAAMwB,QAAQ,GAAGN,SAAS,CAACG,aAAa,YAAKrE,WAAW,CAACyE,IAAI,EAAG;IAChED,QAAQ,CAAC3B,KAAK,CAAC6B,QAAQ,GAAG,SAAS;IACnC,IAAMC,aAAa,GAAGT,SAAS,CAACG,aAAa,YAAKrE,WAAW,CAAC2E,aAAa,EAAG;IAC9E,IAAMC,kBAAkB,GAAGD,aAAa,CAACN,aAAa,YAAKrE,WAAW,CAAC4E,kBAAkB,EAAG;IAC5FA,kBAAkB,CAAC/B,KAAK,CAACE,KAAK,GAAG,MAAM;IACvC,IAAI8B,wBAAwB,GAAG,CAAC,CAACzB,cAAc,GAAGa,eAAe,CAACI,aAAa,YAAKrE,WAAW,CAAC8E,gBAAgB,EAAG,KAAK,IAAI,GAAG,KAAK,CAAC,GAAG1B,cAAc,CAAC2B,YAAY,KAAK,CAAC;IACzK,IAAIC,uBAAuB,GAAG,CAAC,CAAC3B,eAAe,GAAGY,eAAe,CAACI,aAAa,YAAKrE,WAAW,CAACiF,eAAe,EAAG,KAAK,IAAI,GAAG,KAAK,CAAC,GAAG5B,eAAe,CAAC0B,YAAY,KAAK,CAAC;IAEzK,IAAIzB,gBAAgB,CAACE,WAAW,EAAE;MAChC,IAAI0B,qBAAqB;MAEzB,CAACA,qBAAqB,GAAGhB,SAAS,CAACG,aAAa,YAAKrE,WAAW,CAAC8E,gBAAgB,EAAG,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGI,qBAAqB,CAACC,MAAM,EAAE;MACvIN,wBAAwB,GAAG,CAAC;IAC9B;IAEA,IAAIvB,gBAAgB,CAACG,UAAU,EAAE;MAC/B,IAAI2B,sBAAsB;MAE1B,CAACA,sBAAsB,GAAGlB,SAAS,CAACG,aAAa,YAAKrE,WAAW,CAACiF,eAAe,EAAG,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGG,sBAAsB,CAACD,MAAM,EAAE;MACxIH,uBAAuB,GAAG,CAAC;IAC7B,CAAC,CAAC;;IAGFd,SAAS,CAACrB,KAAK,CAACG,MAAM,aAAMe,QAAQ,CAACsB,sBAAsB,GAAGvB,iBAAiB,GAAGe,wBAAwB,GAAGG,uBAAuB,OAAI,CAAC,CAAC;;IAE1IrB,QAAQ,CAAC2B,IAAI,CAACC,SAAS,GAAG,EAAE;IAC5B5B,QAAQ,CAAC2B,IAAI,CAACE,WAAW,CAACtB,SAAS,CAAC;IACpC,IAAMuB,gBAAgB,GAAG,OAAOnC,gBAAgB,CAACoC,SAAS,KAAK,UAAU,GAAGpC,gBAAgB,CAACoC,SAAS,EAAE,GAAGpC,gBAAgB,CAACoC,SAAS;IAErI,IAAI,OAAOD,gBAAgB,KAAK,QAAQ,EAAE;MACxC;MACA,IAAME,YAAY,GAAGhC,QAAQ,CAACpB,aAAa,CAAC,OAAO,CAAC;MACpDoD,YAAY,CAACH,WAAW,CAAC7B,QAAQ,CAACiC,cAAc,CAACH,gBAAgB,CAAC,CAAC;MACnE9B,QAAQ,CAACkC,IAAI,CAACL,WAAW,CAACG,YAAY,CAAC;IACzC;IAEA,IAAIrC,gBAAgB,CAACwC,aAAa,EAAE;MAAA;MAClC,yBAAAnC,QAAQ,CAAC2B,IAAI,CAACS,SAAS,EAACC,GAAG,iDAAI1C,gBAAgB,CAACwC,aAAa,CAACG,KAAK,CAAC,GAAG,CAAC,EAAC;IAC3E;IAEA,IAAI3C,gBAAgB,CAACC,UAAU,EAAE;MAC/B,IAAM2C,iBAAiB,GAAGtF,GAAG,CAACK,OAAO,CAACkF,gBAAgB,CAAC,+BAA+B,CAAC;MAEvF,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,iBAAiB,CAACG,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;QACpD,IAAME,IAAI,GAAGJ,iBAAiB,CAACE,CAAC,CAAC;QAEjC,IAAIE,IAAI,CAACC,OAAO,KAAK,OAAO,EAAE;UAC5B,IAAMC,oBAAoB,GAAG7C,QAAQ,CAACpB,aAAa,CAAC+D,IAAI,CAACC,OAAO,CAAC;UACjE,IAAME,KAAK,GAAGH,IAAI,CAACG,KAAK;UAExB,IAAIA,KAAK,EAAE;YACT,IAAIC,QAAQ,GAAG,EAAE,CAAC,CAAC;;YAEnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAACG,QAAQ,CAACP,MAAM,EAAEM,CAAC,IAAI,CAAC,EAAE;cACjD,IAAI,OAAOF,KAAK,CAACG,QAAQ,CAACD,CAAC,CAAC,CAACE,OAAO,KAAK,QAAQ,EAAE;gBACjDH,QAAQ,cAAOD,KAAK,CAACG,QAAQ,CAACD,CAAC,CAAC,CAACE,OAAO,SAAM;cAChD;YACF;YAEAL,oBAAoB,CAAChB,WAAW,CAAC7B,QAAQ,CAACiC,cAAc,CAACc,QAAQ,CAAC,CAAC;YACnE/C,QAAQ,CAACkC,IAAI,CAACL,WAAW,CAACgB,oBAAoB,CAAC;UACjD;QACF,CAAC,MAAM,IAAIF,IAAI,CAACQ,YAAY,CAAC,MAAM,CAAC,EAAE;UACpC;UACA,IAAMN,qBAAoB,GAAG7C,QAAQ,CAACpB,aAAa,CAAC+D,IAAI,CAACC,OAAO,CAAC;UAEjE,KAAK,IAAII,EAAC,GAAG,CAAC,EAAEA,EAAC,GAAGL,IAAI,CAACS,UAAU,CAACV,MAAM,EAAEM,EAAC,IAAI,CAAC,EAAE;YAClD,IAAMK,IAAI,GAAGV,IAAI,CAACS,UAAU,CAACJ,EAAC,CAAC;YAE/B,IAAIK,IAAI,EAAE;cACRR,qBAAoB,CAACS,YAAY,CAACD,IAAI,CAACE,QAAQ,EAAEF,IAAI,CAACG,SAAS,IAAI,EAAE,CAAC;YACxE;UACF;UAEAxD,QAAQ,CAACkC,IAAI,CAACL,WAAW,CAACgB,qBAAoB,CAAC;QACjD;MACF;IACF,CAAC,CAAC;;IAGF,IAAIY,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,MAAM,EAAE;MACnCpE,WAAW,CAACW,aAAa,CAAC0D,KAAK,EAAE;IACnC;EACF,CAAC,EAAE,CAAC9G,MAAM,EAAEG,GAAG,CAAC,CAAC;EACjB,IAAM4G,2BAA2B,GAAG/H,KAAK,CAAC2B,WAAW,CAAC,UAAA8B,WAAW,EAAI;IACnE,IAAIuE,qBAAqB,EAAEC,sBAAsB;;IAEjD;IACA9G,GAAG,CAACK,OAAO,CAACqE,IAAI,CAACqC,WAAW,CAACzE,WAAW,CAAC,CAAC,CAAC;;IAE3CzC,MAAM,CAACQ,OAAO,CAAC2G,YAAY,CAAC9G,iBAAiB,CAACG,OAAO,IAAI,CAAC,CAAC,CAAC;IAE5D,IAAI,EAAE,CAACwG,qBAAqB,GAAG3G,iBAAiB,CAACG,OAAO,KAAK,IAAI,IAAI,CAACyG,sBAAsB,GAAGD,qBAAqB,CAAC3F,OAAO,KAAK,IAAI,IAAI4F,sBAAsB,CAACG,qBAAqB,CAAC,EAAE;MACtL;MACApH,MAAM,CAACQ,OAAO,CAACiB,wBAAwB,CAACnB,wBAAwB,CAACE,OAAO,CAAC;IAC3E;IAEAR,MAAM,CAACQ,OAAO,CAAC6G,6BAA6B,EAAE,CAAC,CAAC;;IAEhDhH,iBAAiB,CAACG,OAAO,GAAG,IAAI;IAChCF,wBAAwB,CAACE,OAAO,GAAG,CAAC,CAAC;EACvC,CAAC,EAAE,CAACR,MAAM,CAAC,CAAC;EACZ,IAAMsH,iBAAiB,GAAGtI,KAAK,CAAC2B,WAAW;IAAA,sEAAC,iBAAMM,OAAO;MAAA;MAAA;QAAA;UAAA;YACvDf,MAAM,CAACqH,KAAK,wBAAwB;YAAC,IAEhCvH,MAAM,CAACQ,OAAO,CAACC,cAAc,CAACD,OAAO;cAAA;cAAA;YAAA;YAAA,MAClC,IAAIgH,KAAK,CAAC,sCAAsC,CAAC;UAAA;YAGzDnH,iBAAiB,CAACG,OAAO,GAAGR,MAAM,CAACQ,OAAO,CAACiH,WAAW,EAAE,CAAC,CAAC;;YAE1DnH,wBAAwB,CAACE,OAAO,GAAGnB,iCAAiC,CAACW,MAAM,CAAC;YAE5E,IAAIC,KAAK,CAACyH,UAAU,EAAE;cACdC,eAAe,GAAGxI,2BAA2B,CAACa,MAAM,CAAC;cAC3DA,MAAM,CAACQ,OAAO,CAACoH,WAAW,CAACD,eAAe,CAAC;YAC7C;YAAC;YAAA,OAEKjH,yBAAyB,CAACO,OAAO,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACL,MAAM,EAAEK,OAAO,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACJ,UAAU,CAAC;UAAA;YACzHb,MAAM,CAACQ,OAAO,CAACqH,8BAA8B,EAAE;YACzCpF,WAAW,GAAGf,gBAAgB,CAACT,OAAO,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,OAAO,CAAC6G,QAAQ,CAAC;YACjF3H,GAAG,CAACK,OAAO,CAACqE,IAAI,CAACE,WAAW,CAACtC,WAAW,CAAC;YAEzC,IAAIkE,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,MAAM,EAAE;cACnC;cACArE,qBAAqB,CAACC,WAAW,EAAExB,OAAO,CAAC;cAC3C8F,2BAA2B,CAACtE,WAAW,CAAC;YAC1C,CAAC,MAAM;cACLA,WAAW,CAACQ,MAAM,GAAG;gBAAA,OAAMT,qBAAqB,CAACC,WAAW,EAAExB,OAAO,CAAC;cAAA;cAEtEwB,WAAW,CAACW,aAAa,CAAC2E,YAAY,GAAG;gBAAA,OAAMhB,2BAA2B,CAACtE,WAAW,CAAC;cAAA;YACzF;UAAC;UAAA;YAAA;QAAA;MAAA;IAAA,CACF;IAAA;MAAA;IAAA;EAAA,KAAE,CAACxC,KAAK,EAAEC,MAAM,EAAEF,MAAM,EAAE0B,gBAAgB,EAAEc,qBAAqB,EAAEuE,2BAA2B,EAAErG,yBAAyB,CAAC,CAAC;EAC5H,IAAMsH,cAAc,GAAG;IACrBV,iBAAiB,EAAjBA;EACF,CAAC;EACD9H,gBAAgB,CAACQ,MAAM,EAAEgI,cAAc,EAAE,oBAAoB,CAAC;EAC9D;AACF;AACA;;EAEE,IAAMC,oBAAoB,GAAGjJ,KAAK,CAAC2B,WAAW,CAAC,UAACuH,YAAY,EAAEjH,OAAO,EAAK;IACxE,IAAIkH,qBAAqB;IAEzB,IAAI,CAACA,qBAAqB,GAAGlH,OAAO,CAACmH,YAAY,KAAK,IAAI,IAAID,qBAAqB,CAACE,oBAAoB,EAAE;MACxG,OAAOH,YAAY;IACrB;IAEA,oCAAWA,YAAY,IAAE;MACvBI,SAAS,EAAE,aAAaxI,IAAI,CAACF,uBAAuB,EAAE;QACpDqB,OAAO,EAAEA,OAAO,CAACmH;MACnB,CAAC,CAAC;MACFG,aAAa,EAAE;IACjB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EACN5I,4BAA4B,CAACK,MAAM,EAAE,YAAY,EAAEiI,oBAAoB,CAAC;AAC1E,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}