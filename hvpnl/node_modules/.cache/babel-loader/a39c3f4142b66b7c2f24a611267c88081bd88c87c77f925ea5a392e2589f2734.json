{"ast":null,"code":"import _slicedToArray from \"E:/hvpnl-dash2/hvpnl/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"style\"];\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { useForkRef, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/material/utils';\nimport { useGridApiContext } from '../../utils/useGridApiContext';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridVisibleColumnDefinitionsSelector, gridColumnsTotalWidthSelector, gridColumnPositionsSelector } from '../columns/gridColumnsSelector';\nimport { gridDensityRowHeightSelector } from '../density/densitySelector';\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from '../focus/gridFocusStateSelector';\nimport { gridEditRowsStateSelector } from '../editRows/gridEditRowsSelector';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { clamp } from '../../../utils/utils';\nimport { selectedIdsLookupSelector } from '../selection/gridSelectionSelector';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { getFirstNonSpannedColumnToRender } from '../columns/gridColumnsUtils'; // Uses binary search to avoid looping through all possible positions\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function binarySearch(offset, positions) {\n  var sliceStart = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var sliceEnd = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : positions.length;\n  if (positions.length <= 0) {\n    return -1;\n  }\n  if (sliceStart >= sliceEnd) {\n    return sliceStart;\n  }\n  var pivot = sliceStart + Math.floor((sliceEnd - sliceStart) / 2);\n  var itemOffset = positions[pivot];\n  return offset <= itemOffset ? binarySearch(offset, positions, sliceStart, pivot) : binarySearch(offset, positions, pivot + 1, sliceEnd);\n}\nfunction exponentialSearch(offset, positions, index) {\n  var interval = 1;\n  while (index < positions.length && positions[index] < offset) {\n    index += interval;\n    interval *= 2;\n  }\n  return binarySearch(offset, positions, Math.floor(index / 2), Math.min(index, positions.length));\n}\nexport var getRenderableIndexes = function getRenderableIndexes(_ref2) {\n  var firstIndex = _ref2.firstIndex,\n    lastIndex = _ref2.lastIndex,\n    buffer = _ref2.buffer,\n    minFirstIndex = _ref2.minFirstIndex,\n    maxLastIndex = _ref2.maxLastIndex;\n  return [clamp(firstIndex - buffer, minFirstIndex, maxLastIndex), clamp(lastIndex + buffer, minFirstIndex, maxLastIndex)];\n};\nexport var useGridVirtualScroller = function useGridVirtualScroller(props) {\n  var _currentPage$range3, _currentPage$range4;\n  var apiRef = useGridApiContext();\n  var rootProps = useGridRootProps();\n  var visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  var ref = props.ref,\n    disableVirtualization = props.disableVirtualization,\n    onRenderZonePositioning = props.onRenderZonePositioning,\n    _props$renderZoneMinC = props.renderZoneMinColumnIndex,\n    renderZoneMinColumnIndex = _props$renderZoneMinC === void 0 ? 0 : _props$renderZoneMinC,\n    _props$renderZoneMaxC = props.renderZoneMaxColumnIndex,\n    renderZoneMaxColumnIndex = _props$renderZoneMaxC === void 0 ? visibleColumns.length : _props$renderZoneMaxC,\n    getRowProps = props.getRowProps;\n  var columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  var columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);\n  var rowHeight = useGridSelector(apiRef, gridDensityRowHeightSelector);\n  var cellFocus = useGridSelector(apiRef, gridFocusCellSelector);\n  var cellTabIndex = useGridSelector(apiRef, gridTabIndexCellSelector);\n  var rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  var editRowsState = useGridSelector(apiRef, gridEditRowsStateSelector);\n  var selectedRowsLookup = useGridSelector(apiRef, selectedIdsLookupSelector);\n  var currentPage = useGridVisibleRows(apiRef, rootProps);\n  var renderZoneRef = React.useRef(null);\n  var rootRef = React.useRef(null);\n  var handleRef = useForkRef(ref, rootRef);\n  var _React$useState = React.useState(null),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    renderContext = _React$useState2[0],\n    setRenderContext = _React$useState2[1];\n  var prevRenderContext = React.useRef(renderContext);\n  var scrollPosition = React.useRef({\n    top: 0,\n    left: 0\n  });\n  var _React$useState3 = React.useState(null),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    containerWidth = _React$useState4[0],\n    setContainerWidth = _React$useState4[1];\n  var prevTotalWidth = React.useRef(columnsTotalWidth);\n  var getNearestIndexToRender = React.useCallback(function (offset) {\n    var _currentPage$range, _currentPage$range2;\n    var lastMeasuredIndexRelativeToAllRows = apiRef.current.unstable_getLastMeasuredRowIndex();\n    var allRowsMeasured = lastMeasuredIndexRelativeToAllRows === Infinity;\n    if ((_currentPage$range = currentPage.range) != null && _currentPage$range.lastRowIndex && !allRowsMeasured) {\n      // Check if all rows in this page are already measured\n      allRowsMeasured = lastMeasuredIndexRelativeToAllRows >= currentPage.range.lastRowIndex;\n    }\n    var lastMeasuredIndexRelativeToCurrentPage = clamp(lastMeasuredIndexRelativeToAllRows - (((_currentPage$range2 = currentPage.range) == null ? void 0 : _currentPage$range2.firstRowIndex) || 0), 0, rowsMeta.positions.length);\n    if (allRowsMeasured || rowsMeta.positions[lastMeasuredIndexRelativeToCurrentPage] >= offset) {\n      // If all rows were measured (when no row has \"auto\" as height) or all rows before the offset\n      // were measured, then use a binary search because it's faster.\n      return binarySearch(offset, rowsMeta.positions);\n    } // Otherwise, use an exponential search.\n    // If rows have \"auto\" as height, their positions will be based on estimated heights.\n    // In this case, we can skip several steps until we find a position higher than the offset.\n    // Inspired by https://github.com/bvaughn/react-virtualized/blob/master/source/Grid/utils/CellSizeAndPositionManager.js\n\n    return exponentialSearch(offset, rowsMeta.positions, lastMeasuredIndexRelativeToCurrentPage);\n  }, [apiRef, (_currentPage$range3 = currentPage.range) == null ? void 0 : _currentPage$range3.firstRowIndex, (_currentPage$range4 = currentPage.range) == null ? void 0 : _currentPage$range4.lastRowIndex, rowsMeta.positions]);\n  var computeRenderContext = React.useCallback(function () {\n    if (disableVirtualization) {\n      return {\n        firstRowIndex: 0,\n        lastRowIndex: currentPage.rows.length,\n        firstColumnIndex: 0,\n        lastColumnIndex: visibleColumns.length\n      };\n    }\n    var _scrollPosition$curre = scrollPosition.current,\n      top = _scrollPosition$curre.top,\n      left = _scrollPosition$curre.left; // Clamp the value because the search may return an index out of bounds.\n    // In the last index, this is not needed because Array.slice doesn't include it.\n\n    var firstRowIndex = Math.min(getNearestIndexToRender(top), rowsMeta.positions.length - 1);\n    var lastRowIndex = rootProps.autoHeight ? firstRowIndex + currentPage.rows.length : getNearestIndexToRender(top + rootRef.current.clientHeight);\n    var hasRowWithAutoHeight = false;\n    var firstColumnIndex = 0;\n    var lastColumnIndex = columnPositions.length;\n    var _getRenderableIndexes = getRenderableIndexes({\n        firstIndex: firstRowIndex,\n        lastIndex: lastRowIndex,\n        minFirstIndex: 0,\n        maxLastIndex: currentPage.rows.length,\n        buffer: rootProps.rowBuffer\n      }),\n      _getRenderableIndexes2 = _slicedToArray(_getRenderableIndexes, 2),\n      firstRowToRender = _getRenderableIndexes2[0],\n      lastRowToRender = _getRenderableIndexes2[1];\n    for (var i = firstRowToRender; i < lastRowToRender && !hasRowWithAutoHeight; i += 1) {\n      var row = currentPage.rows[i];\n      hasRowWithAutoHeight = apiRef.current.unstable_rowHasAutoHeight(row.id);\n    }\n    if (!hasRowWithAutoHeight) {\n      firstColumnIndex = binarySearch(left, columnPositions);\n      lastColumnIndex = binarySearch(left + containerWidth, columnPositions);\n    }\n    return {\n      firstRowIndex: firstRowIndex,\n      lastRowIndex: lastRowIndex,\n      firstColumnIndex: firstColumnIndex,\n      lastColumnIndex: lastColumnIndex\n    };\n  }, [disableVirtualization, getNearestIndexToRender, rowsMeta.positions.length, rootProps.autoHeight, rootProps.rowBuffer, currentPage.rows, columnPositions, visibleColumns.length, apiRef, containerWidth]);\n  useEnhancedEffect(function () {\n    if (disableVirtualization) {\n      renderZoneRef.current.style.transform = \"translate3d(0px, 0px, 0px)\";\n    } else {\n      // TODO a scroll reset should not be necessary\n      rootRef.current.scrollLeft = 0;\n      rootRef.current.scrollTop = 0;\n    }\n  }, [disableVirtualization]);\n  useEnhancedEffect(function () {\n    setContainerWidth(rootRef.current.clientWidth);\n  }, [rowsMeta.currentPageTotalHeight]);\n  var handleResize = React.useCallback(function (params) {\n    setContainerWidth(params.width);\n  }, []);\n  useGridApiEventHandler(apiRef, 'resize', handleResize);\n  var updateRenderZonePosition = React.useCallback(function (nextRenderContext) {\n    var _getRenderableIndexes3 = getRenderableIndexes({\n        firstIndex: nextRenderContext.firstRowIndex,\n        lastIndex: nextRenderContext.lastRowIndex,\n        minFirstIndex: 0,\n        maxLastIndex: currentPage.rows.length,\n        buffer: rootProps.rowBuffer\n      }),\n      _getRenderableIndexes4 = _slicedToArray(_getRenderableIndexes3, 2),\n      firstRowToRender = _getRenderableIndexes4[0],\n      lastRowToRender = _getRenderableIndexes4[1];\n    var _getRenderableIndexes5 = getRenderableIndexes({\n        firstIndex: nextRenderContext.firstColumnIndex,\n        lastIndex: nextRenderContext.lastColumnIndex,\n        minFirstIndex: renderZoneMinColumnIndex,\n        maxLastIndex: renderZoneMaxColumnIndex,\n        buffer: rootProps.columnBuffer\n      }),\n      _getRenderableIndexes6 = _slicedToArray(_getRenderableIndexes5, 1),\n      initialFirstColumnToRender = _getRenderableIndexes6[0];\n    var firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef: apiRef,\n      firstRowToRender: firstRowToRender,\n      lastRowToRender: lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    var top = gridRowsMetaSelector(apiRef.current.state).positions[firstRowToRender];\n    var left = gridColumnPositionsSelector(apiRef)[firstColumnToRender]; // Call directly the selector because it might be outdated when this method is called\n\n    renderZoneRef.current.style.transform = \"translate3d(\".concat(left, \"px, \").concat(top, \"px, 0px)\");\n    if (typeof onRenderZonePositioning === 'function') {\n      onRenderZonePositioning({\n        top: top,\n        left: left\n      });\n    }\n  }, [apiRef, currentPage.rows, onRenderZonePositioning, renderZoneMinColumnIndex, renderZoneMaxColumnIndex, rootProps.columnBuffer, rootProps.rowBuffer]);\n  React.useLayoutEffect(function () {\n    if (renderContext) {\n      updateRenderZonePosition(renderContext);\n    }\n  }, [renderContext, updateRenderZonePosition]);\n  var updateRenderContext = React.useCallback(function (nextRenderContext) {\n    setRenderContext(nextRenderContext);\n    var _getRenderableIndexes7 = getRenderableIndexes({\n        firstIndex: nextRenderContext.firstRowIndex,\n        lastIndex: nextRenderContext.lastRowIndex,\n        minFirstIndex: 0,\n        maxLastIndex: currentPage.rows.length,\n        buffer: rootProps.rowBuffer\n      }),\n      _getRenderableIndexes8 = _slicedToArray(_getRenderableIndexes7, 2),\n      firstRowToRender = _getRenderableIndexes8[0],\n      lastRowToRender = _getRenderableIndexes8[1];\n    apiRef.current.publishEvent('renderedRowsIntervalChange', {\n      firstRowToRender: firstRowToRender,\n      lastRowToRender: lastRowToRender\n    });\n    prevRenderContext.current = nextRenderContext;\n  }, [apiRef, setRenderContext, prevRenderContext, currentPage.rows.length, rootProps.rowBuffer]);\n  useEnhancedEffect(function () {\n    if (containerWidth == null) {\n      return;\n    }\n    var initialRenderContext = computeRenderContext();\n    updateRenderContext(initialRenderContext);\n    var _scrollPosition$curre2 = scrollPosition.current,\n      top = _scrollPosition$curre2.top,\n      left = _scrollPosition$curre2.left;\n    var params = {\n      top: top,\n      left: left,\n      renderContext: initialRenderContext\n    };\n    apiRef.current.publishEvent('rowsScroll', params);\n  }, [apiRef, computeRenderContext, containerWidth, updateRenderContext]);\n  var handleScroll = function handleScroll(event) {\n    var _event$currentTarget = event.currentTarget,\n      scrollTop = _event$currentTarget.scrollTop,\n      scrollLeft = _event$currentTarget.scrollLeft;\n    scrollPosition.current.top = scrollTop;\n    scrollPosition.current.left = scrollLeft; // On iOS and macOS, negative offsets are possible when swiping past the start\n\n    if (scrollLeft < 0 || scrollTop < 0 || !prevRenderContext.current) {\n      return;\n    } // When virtualization is disabled, the context never changes during scroll\n\n    var nextRenderContext = disableVirtualization ? prevRenderContext.current : computeRenderContext();\n    var topRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstRowIndex - prevRenderContext.current.firstRowIndex);\n    var bottomRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastRowIndex - prevRenderContext.current.lastRowIndex);\n    var topColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstColumnIndex - prevRenderContext.current.firstColumnIndex);\n    var bottomColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastColumnIndex - prevRenderContext.current.lastColumnIndex);\n    var shouldSetState = topRowsScrolledSincePreviousRender >= rootProps.rowThreshold || bottomRowsScrolledSincePreviousRender >= rootProps.rowThreshold || topColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || bottomColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || prevTotalWidth.current !== columnsTotalWidth; // TODO v6: rename event to a wider name, it's not only fired for row scrolling\n\n    apiRef.current.publishEvent('rowsScroll', {\n      top: scrollTop,\n      left: scrollLeft,\n      renderContext: shouldSetState ? nextRenderContext : prevRenderContext.current\n    }, event);\n    if (shouldSetState) {\n      // Prevents batching render context changes\n      ReactDOM.flushSync(function () {\n        updateRenderContext(nextRenderContext);\n      });\n      prevTotalWidth.current = columnsTotalWidth;\n    }\n  };\n  var handleWheel = function handleWheel(event) {\n    apiRef.current.publishEvent('virtualScrollerWheel', {}, event);\n  };\n  var handleTouchMove = function handleTouchMove(event) {\n    apiRef.current.publishEvent('virtualScrollerTouchMove', {}, event);\n  };\n  var getRows = function getRows() {\n    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      renderContext: renderContext\n    };\n    var nextRenderContext = params.renderContext,\n      _params$minFirstColum = params.minFirstColumn,\n      minFirstColumn = _params$minFirstColum === void 0 ? renderZoneMinColumnIndex : _params$minFirstColum,\n      _params$maxLastColumn = params.maxLastColumn,\n      maxLastColumn = _params$maxLastColumn === void 0 ? renderZoneMaxColumnIndex : _params$maxLastColumn,\n      _params$availableSpac = params.availableSpace,\n      availableSpace = _params$availableSpac === void 0 ? containerWidth : _params$availableSpac,\n      _params$rowIndexOffse = params.rowIndexOffset,\n      rowIndexOffset = _params$rowIndexOffse === void 0 ? 0 : _params$rowIndexOffse,\n      _params$position = params.position,\n      position = _params$position === void 0 ? 'center' : _params$position;\n    if (!nextRenderContext || availableSpace == null) {\n      return null;\n    }\n    var rowBuffer = !disableVirtualization ? rootProps.rowBuffer : 0;\n    var columnBuffer = !disableVirtualization ? rootProps.columnBuffer : 0;\n    var _getRenderableIndexes9 = getRenderableIndexes({\n        firstIndex: nextRenderContext.firstRowIndex,\n        lastIndex: nextRenderContext.lastRowIndex,\n        minFirstIndex: 0,\n        maxLastIndex: currentPage.rows.length,\n        buffer: rowBuffer\n      }),\n      _getRenderableIndexes10 = _slicedToArray(_getRenderableIndexes9, 2),\n      firstRowToRender = _getRenderableIndexes10[0],\n      lastRowToRender = _getRenderableIndexes10[1];\n    var renderedRows = [];\n    if (params.rows) {\n      params.rows.forEach(function (row) {\n        renderedRows.push(row);\n        apiRef.current.unstable_calculateColSpan({\n          rowId: row.id,\n          minFirstColumn: minFirstColumn,\n          maxLastColumn: maxLastColumn,\n          columns: visibleColumns\n        });\n      });\n    } else {\n      if (!currentPage.range) {\n        return null;\n      }\n      for (var i = firstRowToRender; i < lastRowToRender; i += 1) {\n        var row = currentPage.rows[i];\n        renderedRows.push(row);\n        apiRef.current.unstable_calculateColSpan({\n          rowId: row.id,\n          minFirstColumn: minFirstColumn,\n          maxLastColumn: maxLastColumn,\n          columns: visibleColumns\n        });\n      }\n    }\n    var _getRenderableIndexes11 = getRenderableIndexes({\n        firstIndex: nextRenderContext.firstColumnIndex,\n        lastIndex: nextRenderContext.lastColumnIndex,\n        minFirstIndex: minFirstColumn,\n        maxLastIndex: maxLastColumn,\n        buffer: columnBuffer\n      }),\n      _getRenderableIndexes12 = _slicedToArray(_getRenderableIndexes11, 2),\n      initialFirstColumnToRender = _getRenderableIndexes12[0],\n      lastColumnToRender = _getRenderableIndexes12[1];\n    var firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef: apiRef,\n      firstRowToRender: firstRowToRender,\n      lastRowToRender: lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    var renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);\n    var rows = [];\n    for (var _i = 0; _i < renderedRows.length; _i += 1) {\n      var _currentPage$range5, _rootProps$components;\n      var _renderedRows$_i = renderedRows[_i],\n        id = _renderedRows$_i.id,\n        model = _renderedRows$_i.model;\n      var lastVisibleRowIndex = firstRowToRender + _i === currentPage.rows.length - 1;\n      var baseRowHeight = !apiRef.current.unstable_rowHasAutoHeight(id) ? apiRef.current.unstable_getRowHeight(id) : 'auto';\n      var isSelected = void 0;\n      if (selectedRowsLookup[id] == null) {\n        isSelected = false;\n      } else {\n        isSelected = apiRef.current.isRowSelectable(id);\n      }\n      rows.push( /*#__PURE__*/_jsx(rootProps.components.Row, _extends({\n        row: model,\n        rowId: id,\n        rowHeight: baseRowHeight,\n        cellFocus: cellFocus // TODO move to inside the row\n        ,\n\n        cellTabIndex: cellTabIndex // TODO move to inside the row\n        ,\n\n        editRowsState: editRowsState // TODO move to inside the row\n        ,\n\n        renderedColumns: renderedColumns,\n        visibleColumns: visibleColumns,\n        firstColumnToRender: firstColumnToRender,\n        lastColumnToRender: lastColumnToRender,\n        selected: isSelected,\n        index: rowIndexOffset + ((currentPage == null ? void 0 : (_currentPage$range5 = currentPage.range) == null ? void 0 : _currentPage$range5.firstRowIndex) || 0) + firstRowToRender + _i,\n        containerWidth: availableSpace,\n        isLastVisible: lastVisibleRowIndex,\n        position: position\n      }, typeof getRowProps === 'function' ? getRowProps(id, model) : {}, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.row), id));\n    }\n    return rows;\n  };\n  var needsHorizontalScrollbar = containerWidth && columnsTotalWidth > containerWidth;\n  var contentSize = React.useMemo(function () {\n    // In cases where the columns exceed the available width,\n    // the horizontal scrollbar should be shown even when there're no rows.\n    // Keeping 1px as minimum height ensures that the scrollbar will visible if necessary.\n    var height = Math.max(rowsMeta.currentPageTotalHeight, 1);\n    var shouldExtendContent = false;\n    if (rootRef != null && rootRef.current && height <= (rootRef == null ? void 0 : rootRef.current.clientHeight)) {\n      shouldExtendContent = true;\n    }\n    var size = {\n      width: needsHorizontalScrollbar ? columnsTotalWidth : 'auto',\n      height: height,\n      minHeight: shouldExtendContent ? '100%' : 'auto'\n    };\n    if (rootProps.autoHeight && currentPage.rows.length === 0) {\n      size.height = 2 * rowHeight; // Give room to show the overlay when there's no row.\n    }\n\n    return size;\n  }, [rootRef, columnsTotalWidth, rowsMeta.currentPageTotalHeight, currentPage.rows.length, needsHorizontalScrollbar, rootProps.autoHeight, rowHeight]);\n  React.useEffect(function () {\n    apiRef.current.publishEvent('virtualScrollerContentSizeChange');\n  }, [apiRef, contentSize]);\n  if (rootProps.autoHeight && currentPage.rows.length === 0) {\n    contentSize.height = 2 * rowHeight; // Give room to show the overlay when there no rows.\n  }\n\n  var rootStyle = {};\n  if (!needsHorizontalScrollbar) {\n    rootStyle.overflowX = 'hidden';\n  }\n  if (rootProps.autoHeight) {\n    rootStyle.overflowY = 'hidden';\n  }\n  var getRenderContext = React.useCallback(function () {\n    return prevRenderContext.current;\n  }, []);\n  apiRef.current.unstable_getRenderContext = getRenderContext;\n  return {\n    renderContext: renderContext,\n    updateRenderZonePosition: updateRenderZonePosition,\n    getRows: getRows,\n    getRootProps: function getRootProps() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var _ref$style = _ref.style,\n        style = _ref$style === void 0 ? {} : _ref$style,\n        other = _objectWithoutPropertiesLoose(_ref, _excluded);\n      return _extends({\n        ref: handleRef,\n        onScroll: handleScroll,\n        onWheel: handleWheel,\n        onTouchMove: handleTouchMove,\n        style: _extends({}, style, rootStyle)\n      }, other);\n    },\n    getContentProps: function getContentProps() {\n      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref3$style = _ref3.style,\n        style = _ref3$style === void 0 ? {} : _ref3$style;\n      return {\n        style: _extends({}, style, contentSize)\n      };\n    },\n    getRenderZoneProps: function getRenderZoneProps() {\n      return {\n        ref: renderZoneRef\n      };\n    }\n  };\n};","map":{"version":3,"names":["_objectWithoutPropertiesLoose","_extends","_excluded","React","ReactDOM","useForkRef","unstable_useEnhancedEffect","useEnhancedEffect","useGridApiContext","useGridRootProps","useGridSelector","gridVisibleColumnDefinitionsSelector","gridColumnsTotalWidthSelector","gridColumnPositionsSelector","gridDensityRowHeightSelector","gridFocusCellSelector","gridTabIndexCellSelector","gridEditRowsStateSelector","useGridVisibleRows","useGridApiEventHandler","clamp","selectedIdsLookupSelector","gridRowsMetaSelector","getFirstNonSpannedColumnToRender","jsx","_jsx","binarySearch","offset","positions","sliceStart","sliceEnd","length","pivot","Math","floor","itemOffset","exponentialSearch","index","interval","min","getRenderableIndexes","firstIndex","lastIndex","buffer","minFirstIndex","maxLastIndex","useGridVirtualScroller","props","_currentPage$range3","_currentPage$range4","apiRef","rootProps","visibleColumns","ref","disableVirtualization","onRenderZonePositioning","renderZoneMinColumnIndex","renderZoneMaxColumnIndex","getRowProps","columnPositions","columnsTotalWidth","rowHeight","cellFocus","cellTabIndex","rowsMeta","editRowsState","selectedRowsLookup","currentPage","renderZoneRef","useRef","rootRef","handleRef","useState","renderContext","setRenderContext","prevRenderContext","scrollPosition","top","left","containerWidth","setContainerWidth","prevTotalWidth","getNearestIndexToRender","useCallback","_currentPage$range","_currentPage$range2","lastMeasuredIndexRelativeToAllRows","current","unstable_getLastMeasuredRowIndex","allRowsMeasured","Infinity","range","lastRowIndex","lastMeasuredIndexRelativeToCurrentPage","firstRowIndex","computeRenderContext","rows","firstColumnIndex","lastColumnIndex","autoHeight","clientHeight","hasRowWithAutoHeight","rowBuffer","firstRowToRender","lastRowToRender","i","row","unstable_rowHasAutoHeight","id","style","transform","scrollLeft","scrollTop","clientWidth","currentPageTotalHeight","handleResize","params","width","updateRenderZonePosition","nextRenderContext","columnBuffer","initialFirstColumnToRender","firstColumnToRender","visibleRows","state","useLayoutEffect","updateRenderContext","publishEvent","initialRenderContext","handleScroll","event","currentTarget","topRowsScrolledSincePreviousRender","abs","bottomRowsScrolledSincePreviousRender","topColumnsScrolledSincePreviousRender","bottomColumnsScrolledSincePreviousRender","shouldSetState","rowThreshold","columnThreshold","flushSync","handleWheel","handleTouchMove","getRows","minFirstColumn","maxLastColumn","availableSpace","rowIndexOffset","position","renderedRows","forEach","push","unstable_calculateColSpan","rowId","columns","lastColumnToRender","renderedColumns","slice","_currentPage$range5","_rootProps$components","model","lastVisibleRowIndex","baseRowHeight","unstable_getRowHeight","isSelected","isRowSelectable","components","Row","selected","isLastVisible","componentsProps","needsHorizontalScrollbar","contentSize","useMemo","height","max","shouldExtendContent","size","minHeight","useEffect","rootStyle","overflowX","overflowY","getRenderContext","unstable_getRenderContext","getRootProps","_ref","other","onScroll","onWheel","onTouchMove","getContentProps","getRenderZoneProps"],"sources":["E:/hvpnl-dash2/hvpnl/node_modules/@mui/x-data-grid/hooks/features/virtualization/useGridVirtualScroller.js"],"sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"style\"];\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { useForkRef, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/material/utils';\nimport { useGridApiContext } from '../../utils/useGridApiContext';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridVisibleColumnDefinitionsSelector, gridColumnsTotalWidthSelector, gridColumnPositionsSelector } from '../columns/gridColumnsSelector';\nimport { gridDensityRowHeightSelector } from '../density/densitySelector';\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from '../focus/gridFocusStateSelector';\nimport { gridEditRowsStateSelector } from '../editRows/gridEditRowsSelector';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { clamp } from '../../../utils/utils';\nimport { selectedIdsLookupSelector } from '../selection/gridSelectionSelector';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { getFirstNonSpannedColumnToRender } from '../columns/gridColumnsUtils'; // Uses binary search to avoid looping through all possible positions\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function binarySearch(offset, positions, sliceStart = 0, sliceEnd = positions.length) {\n  if (positions.length <= 0) {\n    return -1;\n  }\n\n  if (sliceStart >= sliceEnd) {\n    return sliceStart;\n  }\n\n  const pivot = sliceStart + Math.floor((sliceEnd - sliceStart) / 2);\n  const itemOffset = positions[pivot];\n  return offset <= itemOffset ? binarySearch(offset, positions, sliceStart, pivot) : binarySearch(offset, positions, pivot + 1, sliceEnd);\n}\n\nfunction exponentialSearch(offset, positions, index) {\n  let interval = 1;\n\n  while (index < positions.length && positions[index] < offset) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return binarySearch(offset, positions, Math.floor(index / 2), Math.min(index, positions.length));\n}\n\nexport const getRenderableIndexes = ({\n  firstIndex,\n  lastIndex,\n  buffer,\n  minFirstIndex,\n  maxLastIndex\n}) => {\n  return [clamp(firstIndex - buffer, minFirstIndex, maxLastIndex), clamp(lastIndex + buffer, minFirstIndex, maxLastIndex)];\n};\nexport const useGridVirtualScroller = props => {\n  var _currentPage$range3, _currentPage$range4;\n\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const {\n    ref,\n    disableVirtualization,\n    onRenderZonePositioning,\n    renderZoneMinColumnIndex = 0,\n    renderZoneMaxColumnIndex = visibleColumns.length,\n    getRowProps\n  } = props;\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);\n  const rowHeight = useGridSelector(apiRef, gridDensityRowHeightSelector);\n  const cellFocus = useGridSelector(apiRef, gridFocusCellSelector);\n  const cellTabIndex = useGridSelector(apiRef, gridTabIndexCellSelector);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const editRowsState = useGridSelector(apiRef, gridEditRowsStateSelector);\n  const selectedRowsLookup = useGridSelector(apiRef, selectedIdsLookupSelector);\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  const renderZoneRef = React.useRef(null);\n  const rootRef = React.useRef(null);\n  const handleRef = useForkRef(ref, rootRef);\n  const [renderContext, setRenderContext] = React.useState(null);\n  const prevRenderContext = React.useRef(renderContext);\n  const scrollPosition = React.useRef({\n    top: 0,\n    left: 0\n  });\n  const [containerWidth, setContainerWidth] = React.useState(null);\n  const prevTotalWidth = React.useRef(columnsTotalWidth);\n  const getNearestIndexToRender = React.useCallback(offset => {\n    var _currentPage$range, _currentPage$range2;\n\n    const lastMeasuredIndexRelativeToAllRows = apiRef.current.unstable_getLastMeasuredRowIndex();\n    let allRowsMeasured = lastMeasuredIndexRelativeToAllRows === Infinity;\n\n    if ((_currentPage$range = currentPage.range) != null && _currentPage$range.lastRowIndex && !allRowsMeasured) {\n      // Check if all rows in this page are already measured\n      allRowsMeasured = lastMeasuredIndexRelativeToAllRows >= currentPage.range.lastRowIndex;\n    }\n\n    const lastMeasuredIndexRelativeToCurrentPage = clamp(lastMeasuredIndexRelativeToAllRows - (((_currentPage$range2 = currentPage.range) == null ? void 0 : _currentPage$range2.firstRowIndex) || 0), 0, rowsMeta.positions.length);\n\n    if (allRowsMeasured || rowsMeta.positions[lastMeasuredIndexRelativeToCurrentPage] >= offset) {\n      // If all rows were measured (when no row has \"auto\" as height) or all rows before the offset\n      // were measured, then use a binary search because it's faster.\n      return binarySearch(offset, rowsMeta.positions);\n    } // Otherwise, use an exponential search.\n    // If rows have \"auto\" as height, their positions will be based on estimated heights.\n    // In this case, we can skip several steps until we find a position higher than the offset.\n    // Inspired by https://github.com/bvaughn/react-virtualized/blob/master/source/Grid/utils/CellSizeAndPositionManager.js\n\n\n    return exponentialSearch(offset, rowsMeta.positions, lastMeasuredIndexRelativeToCurrentPage);\n  }, [apiRef, (_currentPage$range3 = currentPage.range) == null ? void 0 : _currentPage$range3.firstRowIndex, (_currentPage$range4 = currentPage.range) == null ? void 0 : _currentPage$range4.lastRowIndex, rowsMeta.positions]);\n  const computeRenderContext = React.useCallback(() => {\n    if (disableVirtualization) {\n      return {\n        firstRowIndex: 0,\n        lastRowIndex: currentPage.rows.length,\n        firstColumnIndex: 0,\n        lastColumnIndex: visibleColumns.length\n      };\n    }\n\n    const {\n      top,\n      left\n    } = scrollPosition.current; // Clamp the value because the search may return an index out of bounds.\n    // In the last index, this is not needed because Array.slice doesn't include it.\n\n    const firstRowIndex = Math.min(getNearestIndexToRender(top), rowsMeta.positions.length - 1);\n    const lastRowIndex = rootProps.autoHeight ? firstRowIndex + currentPage.rows.length : getNearestIndexToRender(top + rootRef.current.clientHeight);\n    let hasRowWithAutoHeight = false;\n    let firstColumnIndex = 0;\n    let lastColumnIndex = columnPositions.length;\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: firstRowIndex,\n      lastIndex: lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n\n    for (let i = firstRowToRender; i < lastRowToRender && !hasRowWithAutoHeight; i += 1) {\n      const row = currentPage.rows[i];\n      hasRowWithAutoHeight = apiRef.current.unstable_rowHasAutoHeight(row.id);\n    }\n\n    if (!hasRowWithAutoHeight) {\n      firstColumnIndex = binarySearch(left, columnPositions);\n      lastColumnIndex = binarySearch(left + containerWidth, columnPositions);\n    }\n\n    return {\n      firstRowIndex,\n      lastRowIndex,\n      firstColumnIndex,\n      lastColumnIndex\n    };\n  }, [disableVirtualization, getNearestIndexToRender, rowsMeta.positions.length, rootProps.autoHeight, rootProps.rowBuffer, currentPage.rows, columnPositions, visibleColumns.length, apiRef, containerWidth]);\n  useEnhancedEffect(() => {\n    if (disableVirtualization) {\n      renderZoneRef.current.style.transform = `translate3d(0px, 0px, 0px)`;\n    } else {\n      // TODO a scroll reset should not be necessary\n      rootRef.current.scrollLeft = 0;\n      rootRef.current.scrollTop = 0;\n    }\n  }, [disableVirtualization]);\n  useEnhancedEffect(() => {\n    setContainerWidth(rootRef.current.clientWidth);\n  }, [rowsMeta.currentPageTotalHeight]);\n  const handleResize = React.useCallback(params => {\n    setContainerWidth(params.width);\n  }, []);\n  useGridApiEventHandler(apiRef, 'resize', handleResize);\n  const updateRenderZonePosition = React.useCallback(nextRenderContext => {\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    const [initialFirstColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: renderZoneMinColumnIndex,\n      maxLastIndex: renderZoneMaxColumnIndex,\n      buffer: rootProps.columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const top = gridRowsMetaSelector(apiRef.current.state).positions[firstRowToRender];\n    const left = gridColumnPositionsSelector(apiRef)[firstColumnToRender]; // Call directly the selector because it might be outdated when this method is called\n\n    renderZoneRef.current.style.transform = `translate3d(${left}px, ${top}px, 0px)`;\n\n    if (typeof onRenderZonePositioning === 'function') {\n      onRenderZonePositioning({\n        top,\n        left\n      });\n    }\n  }, [apiRef, currentPage.rows, onRenderZonePositioning, renderZoneMinColumnIndex, renderZoneMaxColumnIndex, rootProps.columnBuffer, rootProps.rowBuffer]);\n  React.useLayoutEffect(() => {\n    if (renderContext) {\n      updateRenderZonePosition(renderContext);\n    }\n  }, [renderContext, updateRenderZonePosition]);\n  const updateRenderContext = React.useCallback(nextRenderContext => {\n    setRenderContext(nextRenderContext);\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    apiRef.current.publishEvent('renderedRowsIntervalChange', {\n      firstRowToRender,\n      lastRowToRender\n    });\n    prevRenderContext.current = nextRenderContext;\n  }, [apiRef, setRenderContext, prevRenderContext, currentPage.rows.length, rootProps.rowBuffer]);\n  useEnhancedEffect(() => {\n    if (containerWidth == null) {\n      return;\n    }\n\n    const initialRenderContext = computeRenderContext();\n    updateRenderContext(initialRenderContext);\n    const {\n      top,\n      left\n    } = scrollPosition.current;\n    const params = {\n      top,\n      left,\n      renderContext: initialRenderContext\n    };\n    apiRef.current.publishEvent('rowsScroll', params);\n  }, [apiRef, computeRenderContext, containerWidth, updateRenderContext]);\n\n  const handleScroll = event => {\n    const {\n      scrollTop,\n      scrollLeft\n    } = event.currentTarget;\n    scrollPosition.current.top = scrollTop;\n    scrollPosition.current.left = scrollLeft; // On iOS and macOS, negative offsets are possible when swiping past the start\n\n    if (scrollLeft < 0 || scrollTop < 0 || !prevRenderContext.current) {\n      return;\n    } // When virtualization is disabled, the context never changes during scroll\n\n\n    const nextRenderContext = disableVirtualization ? prevRenderContext.current : computeRenderContext();\n    const topRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstRowIndex - prevRenderContext.current.firstRowIndex);\n    const bottomRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastRowIndex - prevRenderContext.current.lastRowIndex);\n    const topColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstColumnIndex - prevRenderContext.current.firstColumnIndex);\n    const bottomColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastColumnIndex - prevRenderContext.current.lastColumnIndex);\n    const shouldSetState = topRowsScrolledSincePreviousRender >= rootProps.rowThreshold || bottomRowsScrolledSincePreviousRender >= rootProps.rowThreshold || topColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || bottomColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || prevTotalWidth.current !== columnsTotalWidth; // TODO v6: rename event to a wider name, it's not only fired for row scrolling\n\n    apiRef.current.publishEvent('rowsScroll', {\n      top: scrollTop,\n      left: scrollLeft,\n      renderContext: shouldSetState ? nextRenderContext : prevRenderContext.current\n    }, event);\n\n    if (shouldSetState) {\n      // Prevents batching render context changes\n      ReactDOM.flushSync(() => {\n        updateRenderContext(nextRenderContext);\n      });\n      prevTotalWidth.current = columnsTotalWidth;\n    }\n  };\n\n  const handleWheel = event => {\n    apiRef.current.publishEvent('virtualScrollerWheel', {}, event);\n  };\n\n  const handleTouchMove = event => {\n    apiRef.current.publishEvent('virtualScrollerTouchMove', {}, event);\n  };\n\n  const getRows = (params = {\n    renderContext\n  }) => {\n    const {\n      renderContext: nextRenderContext,\n      minFirstColumn = renderZoneMinColumnIndex,\n      maxLastColumn = renderZoneMaxColumnIndex,\n      availableSpace = containerWidth,\n      rowIndexOffset = 0,\n      position = 'center'\n    } = params;\n\n    if (!nextRenderContext || availableSpace == null) {\n      return null;\n    }\n\n    const rowBuffer = !disableVirtualization ? rootProps.rowBuffer : 0;\n    const columnBuffer = !disableVirtualization ? rootProps.columnBuffer : 0;\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rowBuffer\n    });\n    const renderedRows = [];\n\n    if (params.rows) {\n      params.rows.forEach(row => {\n        renderedRows.push(row);\n        apiRef.current.unstable_calculateColSpan({\n          rowId: row.id,\n          minFirstColumn,\n          maxLastColumn,\n          columns: visibleColumns\n        });\n      });\n    } else {\n      if (!currentPage.range) {\n        return null;\n      }\n\n      for (let i = firstRowToRender; i < lastRowToRender; i += 1) {\n        const row = currentPage.rows[i];\n        renderedRows.push(row);\n        apiRef.current.unstable_calculateColSpan({\n          rowId: row.id,\n          minFirstColumn,\n          maxLastColumn,\n          columns: visibleColumns\n        });\n      }\n    }\n\n    const [initialFirstColumnToRender, lastColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: minFirstColumn,\n      maxLastIndex: maxLastColumn,\n      buffer: columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);\n    const rows = [];\n\n    for (let i = 0; i < renderedRows.length; i += 1) {\n      var _currentPage$range5, _rootProps$components;\n\n      const {\n        id,\n        model\n      } = renderedRows[i];\n      const lastVisibleRowIndex = firstRowToRender + i === currentPage.rows.length - 1;\n      const baseRowHeight = !apiRef.current.unstable_rowHasAutoHeight(id) ? apiRef.current.unstable_getRowHeight(id) : 'auto';\n      let isSelected;\n\n      if (selectedRowsLookup[id] == null) {\n        isSelected = false;\n      } else {\n        isSelected = apiRef.current.isRowSelectable(id);\n      }\n\n      rows.push( /*#__PURE__*/_jsx(rootProps.components.Row, _extends({\n        row: model,\n        rowId: id,\n        rowHeight: baseRowHeight,\n        cellFocus: cellFocus // TODO move to inside the row\n        ,\n        cellTabIndex: cellTabIndex // TODO move to inside the row\n        ,\n        editRowsState: editRowsState // TODO move to inside the row\n        ,\n        renderedColumns: renderedColumns,\n        visibleColumns: visibleColumns,\n        firstColumnToRender: firstColumnToRender,\n        lastColumnToRender: lastColumnToRender,\n        selected: isSelected,\n        index: rowIndexOffset + ((currentPage == null ? void 0 : (_currentPage$range5 = currentPage.range) == null ? void 0 : _currentPage$range5.firstRowIndex) || 0) + firstRowToRender + i,\n        containerWidth: availableSpace,\n        isLastVisible: lastVisibleRowIndex,\n        position: position\n      }, typeof getRowProps === 'function' ? getRowProps(id, model) : {}, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.row), id));\n    }\n\n    return rows;\n  };\n\n  const needsHorizontalScrollbar = containerWidth && columnsTotalWidth > containerWidth;\n  const contentSize = React.useMemo(() => {\n    // In cases where the columns exceed the available width,\n    // the horizontal scrollbar should be shown even when there're no rows.\n    // Keeping 1px as minimum height ensures that the scrollbar will visible if necessary.\n    const height = Math.max(rowsMeta.currentPageTotalHeight, 1);\n    let shouldExtendContent = false;\n\n    if (rootRef != null && rootRef.current && height <= (rootRef == null ? void 0 : rootRef.current.clientHeight)) {\n      shouldExtendContent = true;\n    }\n\n    const size = {\n      width: needsHorizontalScrollbar ? columnsTotalWidth : 'auto',\n      height,\n      minHeight: shouldExtendContent ? '100%' : 'auto'\n    };\n\n    if (rootProps.autoHeight && currentPage.rows.length === 0) {\n      size.height = 2 * rowHeight; // Give room to show the overlay when there's no row.\n    }\n\n    return size;\n  }, [rootRef, columnsTotalWidth, rowsMeta.currentPageTotalHeight, currentPage.rows.length, needsHorizontalScrollbar, rootProps.autoHeight, rowHeight]);\n  React.useEffect(() => {\n    apiRef.current.publishEvent('virtualScrollerContentSizeChange');\n  }, [apiRef, contentSize]);\n\n  if (rootProps.autoHeight && currentPage.rows.length === 0) {\n    contentSize.height = 2 * rowHeight; // Give room to show the overlay when there no rows.\n  }\n\n  const rootStyle = {};\n\n  if (!needsHorizontalScrollbar) {\n    rootStyle.overflowX = 'hidden';\n  }\n\n  if (rootProps.autoHeight) {\n    rootStyle.overflowY = 'hidden';\n  }\n\n  const getRenderContext = React.useCallback(() => {\n    return prevRenderContext.current;\n  }, []);\n  apiRef.current.unstable_getRenderContext = getRenderContext;\n  return {\n    renderContext,\n    updateRenderZonePosition,\n    getRows,\n    getRootProps: (_ref = {}) => {\n      let {\n        style = {}\n      } = _ref,\n          other = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n      return _extends({\n        ref: handleRef,\n        onScroll: handleScroll,\n        onWheel: handleWheel,\n        onTouchMove: handleTouchMove,\n        style: _extends({}, style, rootStyle)\n      }, other);\n    },\n    getContentProps: ({\n      style = {}\n    } = {}) => ({\n      style: _extends({}, style, contentSize)\n    }),\n    getRenderZoneProps: () => ({\n      ref: renderZoneRef\n    })\n  };\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}