{"ast":null,"code":"import * as React from 'react';\nimport { useGridApiMethod, useGridNativeEventListener } from '../../utils';\nfunction writeToClipboardPolyfill(data) {\n  var span = document.createElement('span');\n  span.style.whiteSpace = 'pre';\n  span.style.userSelect = 'all';\n  span.style.opacity = '0px';\n  span.textContent = data;\n  document.body.appendChild(span);\n  var range = document.createRange();\n  range.selectNode(span);\n  var selection = window.getSelection();\n  selection.removeAllRanges();\n  selection.addRange(range);\n  try {\n    document.execCommand('copy');\n  } finally {\n    document.body.removeChild(span);\n  }\n}\n/**\n * @requires useGridCsvExport (method)\n * @requires useGridSelection (method)\n */\n\nexport var useGridClipboard = function useGridClipboard(apiRef) {\n  var copySelectedRowsToClipboard = React.useCallback(function () {\n    var includeHeaders = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (apiRef.current.getSelectedRows().size === 0) {\n      return;\n    }\n    var data = apiRef.current.getDataAsCsv({\n      includeHeaders: includeHeaders,\n      delimiter: '\\t'\n    });\n    if (navigator.clipboard) {\n      navigator.clipboard.writeText(data).catch(function () {\n        writeToClipboardPolyfill(data);\n      });\n    } else {\n      writeToClipboardPolyfill(data);\n    }\n  }, [apiRef]);\n  var handleKeydown = React.useCallback(function (event) {\n    var _window$getSelection;\n    var isModifierKeyPressed = event.ctrlKey || event.metaKey || event.altKey; // event.key === 'c' is not enough as alt+c can lead to ©, ç, or other characters on macOS.\n    // event.code === 'KeyC' is not enough as event.code assume a QWERTY keyboard layout which would\n    // be wrong with a Dvorak keyboard (as if pressing J).\n\n    if (String.fromCharCode(event.keyCode) !== 'C' || !isModifierKeyPressed) {\n      return;\n    } // Do nothing if there's a native selection\n\n    if (((_window$getSelection = window.getSelection()) == null ? void 0 : _window$getSelection.toString()) !== '') {\n      return;\n    }\n    apiRef.current.unstable_copySelectedRowsToClipboard(event.altKey);\n  }, [apiRef]);\n  useGridNativeEventListener(apiRef, apiRef.current.rootElementRef, 'keydown', handleKeydown);\n  var clipboardApi = {\n    unstable_copySelectedRowsToClipboard: copySelectedRowsToClipboard\n  };\n  useGridApiMethod(apiRef, clipboardApi, 'GridClipboardApi');\n};","map":{"version":3,"names":["React","useGridApiMethod","useGridNativeEventListener","writeToClipboardPolyfill","data","span","document","createElement","style","whiteSpace","userSelect","opacity","textContent","body","appendChild","range","createRange","selectNode","selection","window","getSelection","removeAllRanges","addRange","execCommand","removeChild","useGridClipboard","apiRef","copySelectedRowsToClipboard","useCallback","includeHeaders","current","getSelectedRows","size","getDataAsCsv","delimiter","navigator","clipboard","writeText","catch","handleKeydown","event","_window$getSelection","isModifierKeyPressed","ctrlKey","metaKey","altKey","String","fromCharCode","keyCode","toString","unstable_copySelectedRowsToClipboard","rootElementRef","clipboardApi"],"sources":["E:/hvpnl-dash2/hvpnl/node_modules/@mui/x-data-grid/hooks/features/clipboard/useGridClipboard.js"],"sourcesContent":["import * as React from 'react';\nimport { useGridApiMethod, useGridNativeEventListener } from '../../utils';\n\nfunction writeToClipboardPolyfill(data) {\n  const span = document.createElement('span');\n  span.style.whiteSpace = 'pre';\n  span.style.userSelect = 'all';\n  span.style.opacity = '0px';\n  span.textContent = data;\n  document.body.appendChild(span);\n  const range = document.createRange();\n  range.selectNode(span);\n  const selection = window.getSelection();\n  selection.removeAllRanges();\n  selection.addRange(range);\n\n  try {\n    document.execCommand('copy');\n  } finally {\n    document.body.removeChild(span);\n  }\n}\n/**\n * @requires useGridCsvExport (method)\n * @requires useGridSelection (method)\n */\n\n\nexport const useGridClipboard = apiRef => {\n  const copySelectedRowsToClipboard = React.useCallback((includeHeaders = false) => {\n    if (apiRef.current.getSelectedRows().size === 0) {\n      return;\n    }\n\n    const data = apiRef.current.getDataAsCsv({\n      includeHeaders,\n      delimiter: '\\t'\n    });\n\n    if (navigator.clipboard) {\n      navigator.clipboard.writeText(data).catch(() => {\n        writeToClipboardPolyfill(data);\n      });\n    } else {\n      writeToClipboardPolyfill(data);\n    }\n  }, [apiRef]);\n  const handleKeydown = React.useCallback(event => {\n    var _window$getSelection;\n\n    const isModifierKeyPressed = event.ctrlKey || event.metaKey || event.altKey; // event.key === 'c' is not enough as alt+c can lead to ©, ç, or other characters on macOS.\n    // event.code === 'KeyC' is not enough as event.code assume a QWERTY keyboard layout which would\n    // be wrong with a Dvorak keyboard (as if pressing J).\n\n    if (String.fromCharCode(event.keyCode) !== 'C' || !isModifierKeyPressed) {\n      return;\n    } // Do nothing if there's a native selection\n\n\n    if (((_window$getSelection = window.getSelection()) == null ? void 0 : _window$getSelection.toString()) !== '') {\n      return;\n    }\n\n    apiRef.current.unstable_copySelectedRowsToClipboard(event.altKey);\n  }, [apiRef]);\n  useGridNativeEventListener(apiRef, apiRef.current.rootElementRef, 'keydown', handleKeydown);\n  const clipboardApi = {\n    unstable_copySelectedRowsToClipboard: copySelectedRowsToClipboard\n  };\n  useGridApiMethod(apiRef, clipboardApi, 'GridClipboardApi');\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}