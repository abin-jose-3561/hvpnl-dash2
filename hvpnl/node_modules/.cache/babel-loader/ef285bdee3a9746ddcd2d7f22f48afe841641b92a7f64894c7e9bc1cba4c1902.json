{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\20338783\\\\Desktop\\\\React\\\\hvpnl-dash\\\\hvpnl\\\\src\\\\components\\\\BarChart.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Chart as ChartJS, BarElement } from 'chart.js';\nimport { Bar } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(BarElement);\nconst BarChart = () => {\n  _s();\n  var _chart$coins, _chart$coins2, _chart$coins3;\n  const [chart, setChart] = useState({});\n  var baseUrl = \"https://api.coinranking.com/v2/coins/?limit=10\";\n  var proxyUrl = \"https://cors-anywhere.herokuapp.com/\";\n  var apiKey = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\";\n  useEffect(() => {\n    const fetchCoins = async () => {\n      await fetch(`${proxyUrl}${baseUrl}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'x-access-token': `${apiKey}`,\n          'Access-Control-Allow-Origin': \"*\"\n        }\n      }).then(response => {\n        if (response.ok) {\n          response.json().then(json => {\n            console.log(json.data);\n            setChart(json.data);\n          });\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n    };\n    fetchCoins();\n  }, [baseUrl, proxyUrl, apiKey]);\n  console.log(\"chart\", chart);\n  var data = {\n    labels: chart === null || chart === void 0 ? void 0 : (_chart$coins = chart.coins) === null || _chart$coins === void 0 ? void 0 : _chart$coins.map(x => x.name),\n    datasets: [{\n      label: `${chart === null || chart === void 0 ? void 0 : (_chart$coins2 = chart.coins) === null || _chart$coins2 === void 0 ? void 0 : _chart$coins2.length} Coins Available`,\n      data: chart === null || chart === void 0 ? void 0 : (_chart$coins3 = chart.coins) === null || _chart$coins3 === void 0 ? void 0 : _chart$coins3.map(x => x.price),\n      backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)', 'rgba(153, 102, 255, 0.2)', 'rgba(255, 159, 64, 0.2)'],\n      borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)', 'rgba(255, 159, 64, 1)'],\n      borderWidth: 1\n    }]\n  };\n  var options = {\n    maintainAspectRatio: false,\n    scales: {},\n    legend: {\n      labels: {\n        fontSize: 25\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Bar, {\n      data: data,\n      height: 400,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n_s(BarChart, \"ip4zykqV5S/78tH8IJvHUJRfpBU=\");\n_c = BarChart;\nexport default BarChart;\n\n// import { useTheme } from \"@mui/material\";\n// import { ResponsiveBar } from \"@nivo/bar\";\n// import { tokens } from \"../theme\";\n// import { mockDataContacts as data } from \"../data/mockData\";\n\n// const BarChart = ({ isDashboard = false }) => {\n//   const theme = useTheme();\n//   const colors = tokens(theme.palette.mode);\n\n//   return (\n//     <ResponsiveBar\n//       data={data}\n//       theme={{\n//         // added\n//         axis: {\n//           domain: {\n//             line: {\n//               stroke: colors.grey[100],\n//             },\n//           },\n//           legend: {\n//             text: {\n//               fill: colors.grey[100],\n//             },\n//           },\n//           ticks: {\n//             line: {\n//               stroke: colors.grey[100],\n//               strokeWidth: 1,\n//             },\n//             text: {\n//               fill: colors.grey[100],\n//             },\n//           },\n//         },\n//         legends: {\n//           text: {\n//             fill: colors.grey[100],\n//           },\n//         },\n//       }}\n//       keys={[\"TrippingCount\"]}\n//       indexBy=\"id\"\n//       margin={{ top: 50, right: 130, bottom: 50, left: 60 }}\n//       padding={0.3}\n//       valueScale={{ type: \"linear\" }}\n//       indexScale={{ type: \"band\", round: true }}\n//       colors={{ scheme: \"nivo\" }}\n//       defs={[\n//         {\n//           id: \"dots\",\n//           type: \"patternDots\",\n//           background: \"inherit\",\n//           color: \"#38bcb2\",\n//           size: 4,\n//           padding: 1,\n//           stagger: true,\n//         },\n//         {\n//           id: \"lines\",\n//           type: \"patternLines\",\n//           background: \"inherit\",\n//           color: \"#eed312\",\n//           rotation: -45,\n//           lineWidth: 6,\n//           spacing: 10,\n//         },\n//       ]}\n//       borderColor={{\n//         from: \"color\",\n//         modifiers: [[\"darker\", \"1.6\"]],\n//       }}\n//       axisTop={null}\n//       axisRight={null}\n//       axisBottom={{\n//         tickSize: 5,\n//         tickPadding: 5,\n//         tickRotation: 0,\n//         legend: isDashboard ? undefined : \"Circle\", // changed\n//         legendPosition: \"middle\",\n//         legendOffset: 32,\n//       }}\n//       axisLeft={{\n//         tickSize: 5,\n//         tickPadding: 5,\n//         tickRotation: 0,\n//         legend: isDashboard ? undefined : \"TrippingCount\", // changed\n//         legendPosition: \"middle\",\n//         legendOffset: -40,\n//       }}\n//       enableLabel={false}\n//       labelSkipWidth={12}\n//       labelSkipHeight={12}\n//       labelTextColor={{\n//         from: \"color\",\n//         modifiers: [[\"darker\", 1.6]],\n//       }}\n//       legends={[\n//         {\n//           dataFrom: \"keys\",\n//           anchor: \"bottom-right\",\n//           direction: \"column\",\n//           justify: false,\n//           translateX: 120,\n//           translateY: 0,\n//           itemsSpacing: 2,\n//           itemWidth: 100,\n//           itemHeight: 20,\n//           itemDirection: \"left-to-right\",\n//           itemOpacity: 0.85,\n//           symbolSize: 20,\n//           effects: [\n//             {\n//               on: \"hover\",\n//               style: {\n//                 itemOpacity: 1,\n//               },\n//             },\n//           ],\n//         },\n//       ]}\n//       role=\"application\"\n//       barAriaLabel={function (e) {\n//         return e.id + \": \" + e.formattedValue + \" in country: \" + e.indexValue;\n//       }}\n//     />\n//   );\n// };\n\n// export default BarChart;\nvar _c;\n$RefreshReg$(_c, \"BarChart\");","map":{"version":3,"names":["React","useState","useEffect","Chart","ChartJS","BarElement","Bar","register","BarChart","chart","setChart","baseUrl","proxyUrl","apiKey","fetchCoins","fetch","method","headers","then","response","ok","json","console","log","data","catch","error","labels","coins","map","x","name","datasets","label","length","price","backgroundColor","borderColor","borderWidth","options","maintainAspectRatio","scales","legend","fontSize"],"sources":["C:/Users/20338783/Desktop/React/hvpnl-dash/hvpnl/src/components/BarChart.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport {\r\n  Chart as ChartJS,\r\n\r\n  BarElement,\r\n\r\n} from 'chart.js';\r\n\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\nChartJS.register(\r\n  BarElement,\r\n);\r\n\r\n\r\nconst BarChart = () => {\r\n  const [chart, setChart] = useState({})\r\n  var baseUrl = \"https://api.coinranking.com/v2/coins/?limit=10\";\r\n  var proxyUrl = \"https://cors-anywhere.herokuapp.com/\";\r\n  var apiKey = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\";\r\n\r\n\r\n  useEffect(() => {\r\n    const fetchCoins = async () => {\r\n      await fetch(`${proxyUrl}${baseUrl}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'x-access-token': `${apiKey}`,\r\n          'Access-Control-Allow-Origin': \"*\"\r\n        }\r\n      })\r\n        .then((response) => {\r\n          if (response.ok) {\r\n            response.json().then((json) => {\r\n              console.log(json.data);\r\n              setChart(json.data)\r\n            });\r\n          }\r\n        }).catch((error) => {\r\n          console.log(error);\r\n        });\r\n    };\r\n    fetchCoins()\r\n  }, [baseUrl, proxyUrl, apiKey])\r\n\r\n  console.log(\"chart\", chart);\r\n  var data = {\r\n    labels: chart?.coins?.map(x => x.name),\r\n    datasets: [{\r\n      label: `${chart?.coins?.length} Coins Available`,\r\n      data: chart?.coins?.map(x => x.price),\r\n      backgroundColor: [\r\n        'rgba(255, 99, 132, 0.2)',\r\n        'rgba(54, 162, 235, 0.2)',\r\n        'rgba(255, 206, 86, 0.2)',\r\n        'rgba(75, 192, 192, 0.2)',\r\n        'rgba(153, 102, 255, 0.2)',\r\n        'rgba(255, 159, 64, 0.2)'\r\n      ],\r\n      borderColor: [\r\n        'rgba(255, 99, 132, 1)',\r\n        'rgba(54, 162, 235, 1)',\r\n        'rgba(255, 206, 86, 1)',\r\n        'rgba(75, 192, 192, 1)',\r\n        'rgba(153, 102, 255, 1)',\r\n        'rgba(255, 159, 64, 1)'\r\n      ],\r\n      borderWidth: 1\r\n    }]\r\n  };\r\n\r\n  var options = {\r\n    maintainAspectRatio: false,\r\n    scales: {\r\n    },\r\n    legend: {\r\n      labels: {\r\n        fontSize: 25,\r\n      },\r\n    },\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Bar\r\n        data={data}\r\n        height={400}\r\n        options={options}\r\n\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default BarChart;\r\n\r\n\r\n// import { useTheme } from \"@mui/material\";\r\n// import { ResponsiveBar } from \"@nivo/bar\";\r\n// import { tokens } from \"../theme\";\r\n// import { mockDataContacts as data } from \"../data/mockData\";\r\n\r\n// const BarChart = ({ isDashboard = false }) => {\r\n//   const theme = useTheme();\r\n//   const colors = tokens(theme.palette.mode);\r\n\r\n//   return (\r\n//     <ResponsiveBar\r\n//       data={data}\r\n//       theme={{\r\n//         // added\r\n//         axis: {\r\n//           domain: {\r\n//             line: {\r\n//               stroke: colors.grey[100],\r\n//             },\r\n//           },\r\n//           legend: {\r\n//             text: {\r\n//               fill: colors.grey[100],\r\n//             },\r\n//           },\r\n//           ticks: {\r\n//             line: {\r\n//               stroke: colors.grey[100],\r\n//               strokeWidth: 1,\r\n//             },\r\n//             text: {\r\n//               fill: colors.grey[100],\r\n//             },\r\n//           },\r\n//         },\r\n//         legends: {\r\n//           text: {\r\n//             fill: colors.grey[100],\r\n//           },\r\n//         },\r\n//       }}\r\n//       keys={[\"TrippingCount\"]}\r\n//       indexBy=\"id\"\r\n//       margin={{ top: 50, right: 130, bottom: 50, left: 60 }}\r\n//       padding={0.3}\r\n//       valueScale={{ type: \"linear\" }}\r\n//       indexScale={{ type: \"band\", round: true }}\r\n//       colors={{ scheme: \"nivo\" }}\r\n//       defs={[\r\n//         {\r\n//           id: \"dots\",\r\n//           type: \"patternDots\",\r\n//           background: \"inherit\",\r\n//           color: \"#38bcb2\",\r\n//           size: 4,\r\n//           padding: 1,\r\n//           stagger: true,\r\n//         },\r\n//         {\r\n//           id: \"lines\",\r\n//           type: \"patternLines\",\r\n//           background: \"inherit\",\r\n//           color: \"#eed312\",\r\n//           rotation: -45,\r\n//           lineWidth: 6,\r\n//           spacing: 10,\r\n//         },\r\n//       ]}\r\n//       borderColor={{\r\n//         from: \"color\",\r\n//         modifiers: [[\"darker\", \"1.6\"]],\r\n//       }}\r\n//       axisTop={null}\r\n//       axisRight={null}\r\n//       axisBottom={{\r\n//         tickSize: 5,\r\n//         tickPadding: 5,\r\n//         tickRotation: 0,\r\n//         legend: isDashboard ? undefined : \"Circle\", // changed\r\n//         legendPosition: \"middle\",\r\n//         legendOffset: 32,\r\n//       }}\r\n//       axisLeft={{\r\n//         tickSize: 5,\r\n//         tickPadding: 5,\r\n//         tickRotation: 0,\r\n//         legend: isDashboard ? undefined : \"TrippingCount\", // changed\r\n//         legendPosition: \"middle\",\r\n//         legendOffset: -40,\r\n//       }}\r\n//       enableLabel={false}\r\n//       labelSkipWidth={12}\r\n//       labelSkipHeight={12}\r\n//       labelTextColor={{\r\n//         from: \"color\",\r\n//         modifiers: [[\"darker\", 1.6]],\r\n//       }}\r\n//       legends={[\r\n//         {\r\n//           dataFrom: \"keys\",\r\n//           anchor: \"bottom-right\",\r\n//           direction: \"column\",\r\n//           justify: false,\r\n//           translateX: 120,\r\n//           translateY: 0,\r\n//           itemsSpacing: 2,\r\n//           itemWidth: 100,\r\n//           itemHeight: 20,\r\n//           itemDirection: \"left-to-right\",\r\n//           itemOpacity: 0.85,\r\n//           symbolSize: 20,\r\n//           effects: [\r\n//             {\r\n//               on: \"hover\",\r\n//               style: {\r\n//                 itemOpacity: 1,\r\n//               },\r\n//             },\r\n//           ],\r\n//         },\r\n//       ]}\r\n//       role=\"application\"\r\n//       barAriaLabel={function (e) {\r\n//         return e.id + \": \" + e.formattedValue + \" in country: \" + e.indexValue;\r\n//       }}\r\n//     />\r\n//   );\r\n// };\r\n\r\n// export default BarChart;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SACEC,KAAK,IAAIC,OAAO,EAEhBC,UAAU,QAEL,UAAU;AAEjB,SAASC,GAAG,QAAQ,iBAAiB;AAAC;AAEtCF,OAAO,CAACG,QAAQ,CACdF,UAAU,CACX;AAGD,MAAMG,QAAQ,GAAG,MAAM;EAAA;EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC,CAAC;EACtC,IAAIU,OAAO,GAAG,gDAAgD;EAC9D,IAAIC,QAAQ,GAAG,sCAAsC;EACrD,IAAIC,MAAM,GAAG,oCAAoC;EAGjDX,SAAS,CAAC,MAAM;IACd,MAAMY,UAAU,GAAG,YAAY;MAC7B,MAAMC,KAAK,CAAE,GAAEH,QAAS,GAAED,OAAQ,EAAC,EAAE;QACnCK,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,gBAAgB,EAAG,GAAEJ,MAAO,EAAC;UAC7B,6BAA6B,EAAE;QACjC;MACF,CAAC,CAAC,CACCK,IAAI,CAAEC,QAAQ,IAAK;QAClB,IAAIA,QAAQ,CAACC,EAAE,EAAE;UACfD,QAAQ,CAACE,IAAI,EAAE,CAACH,IAAI,CAAEG,IAAI,IAAK;YAC7BC,OAAO,CAACC,GAAG,CAACF,IAAI,CAACG,IAAI,CAAC;YACtBd,QAAQ,CAACW,IAAI,CAACG,IAAI,CAAC;UACrB,CAAC,CAAC;QACJ;MACF,CAAC,CAAC,CAACC,KAAK,CAAEC,KAAK,IAAK;QAClBJ,OAAO,CAACC,GAAG,CAACG,KAAK,CAAC;MACpB,CAAC,CAAC;IACN,CAAC;IACDZ,UAAU,EAAE;EACd,CAAC,EAAE,CAACH,OAAO,EAAEC,QAAQ,EAAEC,MAAM,CAAC,CAAC;EAE/BS,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEd,KAAK,CAAC;EAC3B,IAAIe,IAAI,GAAG;IACTG,MAAM,EAAElB,KAAK,aAALA,KAAK,uCAALA,KAAK,CAAEmB,KAAK,iDAAZ,aAAcC,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC;IACtCC,QAAQ,EAAE,CAAC;MACTC,KAAK,EAAG,GAAExB,KAAK,aAALA,KAAK,wCAALA,KAAK,CAAEmB,KAAK,kDAAZ,cAAcM,MAAO,kBAAiB;MAChDV,IAAI,EAAEf,KAAK,aAALA,KAAK,wCAALA,KAAK,CAAEmB,KAAK,kDAAZ,cAAcC,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACK,KAAK,CAAC;MACrCC,eAAe,EAAE,CACf,yBAAyB,EACzB,yBAAyB,EACzB,yBAAyB,EACzB,yBAAyB,EACzB,0BAA0B,EAC1B,yBAAyB,CAC1B;MACDC,WAAW,EAAE,CACX,uBAAuB,EACvB,uBAAuB,EACvB,uBAAuB,EACvB,uBAAuB,EACvB,wBAAwB,EACxB,uBAAuB,CACxB;MACDC,WAAW,EAAE;IACf,CAAC;EACH,CAAC;EAED,IAAIC,OAAO,GAAG;IACZC,mBAAmB,EAAE,KAAK;IAC1BC,MAAM,EAAE,CACR,CAAC;IACDC,MAAM,EAAE;MACNf,MAAM,EAAE;QACNgB,QAAQ,EAAE;MACZ;IACF;EACF,CAAC;EAED,oBACE;IAAA,uBACE,QAAC,GAAG;MACF,IAAI,EAAEnB,IAAK;MACX,MAAM,EAAE,GAAI;MACZ,OAAO,EAAEe;IAAQ;MAAA;MAAA;MAAA;IAAA;EAEjB;IAAA;IAAA;IAAA;EAAA,QACE;AAEV,CAAC;AAAA,GA9EK/B,QAAQ;AAAA,KAARA,QAAQ;AAgFd,eAAeA,QAAQ;;AAGv},"metadata":{},"sourceType":"module","externalDependencies":[]}