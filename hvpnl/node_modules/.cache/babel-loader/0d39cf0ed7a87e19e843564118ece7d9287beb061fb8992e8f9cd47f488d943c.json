{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\20338783\\\\Desktop\\\\React\\\\hvpnl-dash\\\\hvpnl\\\\src\\\\components\\\\BarChart.jsx\",\n  _s = $RefreshSig$();\nimport { Box } from '@mui/material';\nimport { useEffect, useState } from 'react';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\nimport { Bar } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\nconst options = {\n  axis: 'x',\n  elements: {\n    bar: {\n      borderWidth: 2\n    }\n  },\n  responsive: true,\n  plugins: {\n    legend: {\n      position: 'right'\n    }\n  }\n};\nconst TransBar = () => {\n  _s();\n  const [data, setData] = useState({\n    datasets: [{\n      label: 'Dataset 1',\n      data: [],\n      borderColor: 'rgb(258, 199, 132)',\n      backgroundColor: 'rgba(25, 190, 130)'\n    }\n\n    //   {\n\n    //     label: 'Dataset 2',\n\n    //     data:[],\n\n    //     borderColor: 'rgb(53, 162, 235)',\n\n    //     backgroundColor: 'rgba(53, 162, 235, 0.5)',\n\n    //   },\n    ]\n  });\n\n  const [data2, setData2] = useState({\n    datasets: [{\n      label: 'Dataset 1',\n      data: [],\n      borderColor: 'rgb(258, 199, 132)',\n      backgroundColor: 'rgba(25, 190, 130)'\n    }\n\n    //   {\n\n    //     label: 'Dataset 2',\n\n    //     data:[],\n\n    //     borderColor: 'rgb(53, 162, 235)',\n\n    //     backgroundColor: 'rgba(53, 162, 235, 0.5)',\n\n    //   },\n    ]\n  });\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const url = 'http://localhost:3001/tb';\n      const dataSet1 = [];\n      const dataSet2 = [];\n      await fetch(url).then(data => {\n        console.log(\"Api data\", data);\n        const res = data.json();\n        return res;\n      }).then(res => {\n        console.log(\"ressss\", res);\n        for (const val of res) {\n          dataSet1.push(val.ckt);\n        }\n        setData({\n          labels: ['440', '220', '132', '66'],\n          datasets: [{\n            label: 'circuit km',\n            data: dataSet1,\n            backgroundColor: \"#38bcb2\",\n            size: 4,\n            padding: 1\n          }\n\n          //   {\n\n          //     label: 'Dataset ID2',\n\n          //     data:dataSet2,\n\n          //     borderColor: 'rgb(53, 162, 235)',\n\n          //     backgroundColor: 'rgba(53, 235, 0.5)',\n\n          //   },\n          ]\n        });\n\n        console.log(\"arrData\", dataSet1);\n      }).catch(e => {\n        console.log(\"error\", e);\n      });\n      await fetch(url).then(data2 => {\n        console.log(\"Api data\", data2);\n        const ser = data2.json();\n        return ser;\n      }).then(ser => {\n        console.log(\"ressss\", ser);\n        for (const val of ser) {\n          dataSet2.push(val.nolines);\n        }\n        setData2({\n          labels: ['440', '220', '132', '66'],\n          datasets: [{\n            label: 'No Of Lines',\n            data: dataSet2,\n            backgroundColor: \"#38bcb2\",\n            size: 4,\n            padding: 1\n          }]\n        });\n        console.log(\"arrData\", dataSet2);\n      }).catch(e => {\n        console.log(\"error\", e);\n      });\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    mt: \"-40\",\n    display: \"grid\",\n    gridTemplateColumns: \"repeat(12, 1fr)\",\n    gridAutoRows: \"440px\",\n    gap: \"10px\",\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      gridColumn: \"span 6\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      children: /*#__PURE__*/_jsxDEV(Bar, {\n        data: data,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 1\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      gridColumn: \"span 6\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      children: /*#__PURE__*/_jsxDEV(Bar, {\n        data: data2,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 7\n  }, this);\n};\n_s(TransBar, \"vW//M4pUt2zY8az5zGotR9CEH2Q=\");\n_c = TransBar;\nexport default TransBar;\nvar _c;\n$RefreshReg$(_c, \"TransBar\");","map":{"version":3,"names":["Box","useEffect","useState","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","Bar","register","options","axis","elements","bar","borderWidth","responsive","plugins","legend","position","TransBar","data","setData","datasets","label","borderColor","backgroundColor","data2","setData2","fetchData","url","dataSet1","dataSet2","fetch","then","console","log","res","json","val","push","ckt","labels","size","padding","catch","e","ser","nolines"],"sources":["C:/Users/20338783/Desktop/React/hvpnl-dash/hvpnl/src/components/BarChart.jsx"],"sourcesContent":["import { Box } from '@mui/material';\r\nimport {useEffect, useState} from 'react';\r\nimport {\r\n    Chart as ChartJS,\r\n    CategoryScale,\r\n    LinearScale,\r\n    BarElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n  } from 'chart.js';\r\n\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\nChartJS.register(\r\n    CategoryScale,\r\n    LinearScale,\r\n    BarElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend\r\n  );\r\n\r\nconst options = {\r\n    axis: 'x',\r\n    elements: {\r\n      bar: {\r\n        borderWidth: 2,\r\n      },\r\n    },\r\n    responsive: true,\r\n    plugins: {\r\n      legend: {\r\n        position: 'right',\r\n      },\r\n    },\r\n  };\r\n\r\n\r\n\r\nconst TransBar =() => {\r\n    const [data, setData] = useState({\r\n        datasets: [\r\n          {\r\n            label: 'Dataset 1',\r\n            data:[],\r\n            borderColor: 'rgb(258, 199, 132)',\r\n            backgroundColor: 'rgba(25, 190, 130)',\r\n          },\r\n\r\n        //   {\r\n\r\n        //     label: 'Dataset 2',\r\n\r\n        //     data:[],\r\n\r\n        //     borderColor: 'rgb(53, 162, 235)',\r\n\r\n        //     backgroundColor: 'rgba(53, 162, 235, 0.5)',\r\n\r\n        //   },\r\n\r\n        ],\r\n      });\r\n      const [data2, setData2] = useState({\r\n        datasets: [\r\n          {\r\n            label: 'Dataset 1',\r\n            data:[],\r\n            borderColor: 'rgb(258, 199, 132)',\r\n            backgroundColor: 'rgba(25, 190, 130)',\r\n\r\n          },\r\n\r\n        //   {\r\n\r\n        //     label: 'Dataset 2',\r\n\r\n        //     data:[],\r\n\r\n        //     borderColor: 'rgb(53, 162, 235)',\r\n\r\n        //     backgroundColor: 'rgba(53, 162, 235, 0.5)',\r\n\r\n        //   },\r\n\r\n        ],\r\n\r\n      });\r\n\r\n    useEffect(()=> {\r\n       const fetchData= async()=> {\r\n           const url = 'http://localhost:3001/tb'\r\n           const dataSet1 = [];\r\n           const dataSet2 = [];\r\n         await fetch(url).then((data)=> {\r\n             console.log(\"Api data\", data)\r\n             const res = data.json();\r\n             return res\r\n         }).then((res) => {\r\n             console.log(\"ressss\", res)\r\n            for (const val of res) {\r\n                dataSet1.push(val.ckt);\r\n            }\r\n\r\n            setData({\r\n                labels:['440','220', '132', '66'],\r\n                datasets: [\r\n                  {\r\n\r\n                    label: 'circuit km',\r\n                    data:dataSet1,\r\n                    backgroundColor: \"#38bcb2\",\r\n                    size:4,\r\n                    padding:1,\r\n                  },\r\n\r\n                //   {\r\n\r\n                //     label: 'Dataset ID2',\r\n\r\n                //     data:dataSet2,\r\n\r\n                //     borderColor: 'rgb(53, 162, 235)',\r\n\r\n                //     backgroundColor: 'rgba(53, 235, 0.5)',\r\n\r\n                //   },\r\n\r\n                ],\r\n\r\n              })\r\n            console.log(\"arrData\", dataSet1)\r\n\r\n         }).catch(e => {\r\n\r\n                console.log(\"error\", e)\r\n\r\n            })\r\n\r\n            await fetch(url).then((data2)=> {\r\n              console.log(\"Api data\", data2)\r\n              const ser = data2.json();\r\n              return ser\r\n\r\n          }).then((ser) => {\r\n              console.log(\"ressss\", ser)\r\n             for (const val of ser) {\r\n                 dataSet2.push(val.nolines);\r\n\r\n             }\r\n\r\n             setData2({\r\n                 labels:['440','220', '132', '66'],\r\n                 datasets: [\r\n                   {\r\n                     label: 'No Of Lines',\r\n                     data:dataSet2,\r\n                     backgroundColor: \"#38bcb2\",\r\n                     size:4,\r\n                     padding:1,\r\n\r\n                   },\r\n                 ],\r\n               })\r\n             console.log(\"arrData\", dataSet2)\r\n\r\n          }).catch(e => {\r\n                 console.log(\"error\", e)\r\n             })\r\n\r\n        }\r\n    \r\n        fetchData();          \r\n\r\n    },[])\r\n\r\n   \r\n\r\n    return(\r\n      <Box mt='-40' display=\"grid\"\r\n      gridTemplateColumns=\"repeat(12, 1fr)\"\r\n      gridAutoRows=\"440px\"\r\n      gap=\"10px\">\r\n\r\n  <Box\r\n  gridColumn=\"span 6\"\r\n  display=\"flex\"\r\n  alignItems=\"center\"\r\n  justifyContent=\"center\"\r\n\r\n>\r\n<Bar data={data} options={options}/>\r\n   \r\n      </Box>\r\n      <Box\r\n\r\n          gridColumn=\"span 6\"\r\n          display=\"flex\"\r\n          alignItems=\"center\"\r\n          justifyContent=\"center\"\r\n        >\r\n        <Bar data={data2} options={options}/>\r\n\r\n      </Box> \r\n      </Box>\r\n       )\r\n  }\r\nexport default TransBar;"],"mappings":";;AAAA,SAASA,GAAG,QAAQ,eAAe;AACnC,SAAQC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AACzC,SACIC,KAAK,IAAIC,OAAO,EAChBC,aAAa,EACbC,WAAW,EACXC,UAAU,EACVC,KAAK,EACLC,OAAO,EACPC,MAAM,QACD,UAAU;AAEnB,SAASC,GAAG,QAAQ,iBAAiB;AAAC;AAEtCP,OAAO,CAACQ,QAAQ,CACZP,aAAa,EACbC,WAAW,EACXC,UAAU,EACVC,KAAK,EACLC,OAAO,EACPC,MAAM,CACP;AAEH,MAAMG,OAAO,GAAG;EACZC,IAAI,EAAE,GAAG;EACTC,QAAQ,EAAE;IACRC,GAAG,EAAE;MACHC,WAAW,EAAE;IACf;EACF,CAAC;EACDC,UAAU,EAAE,IAAI;EAChBC,OAAO,EAAE;IACPC,MAAM,EAAE;MACNC,QAAQ,EAAE;IACZ;EACF;AACF,CAAC;AAIH,MAAMC,QAAQ,GAAE,MAAM;EAAA;EAClB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGtB,QAAQ,CAAC;IAC7BuB,QAAQ,EAAE,CACR;MACEC,KAAK,EAAE,WAAW;MAClBH,IAAI,EAAC,EAAE;MACPI,WAAW,EAAE,oBAAoB;MACjCC,eAAe,EAAE;IACnB;;IAEF;;IAEA;;IAEA;;IAEA;;IAEA;;IAEA;IAAA;EAGF,CAAC,CAAC;;EACF,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAG5B,QAAQ,CAAC;IACjCuB,QAAQ,EAAE,CACR;MACEC,KAAK,EAAE,WAAW;MAClBH,IAAI,EAAC,EAAE;MACPI,WAAW,EAAE,oBAAoB;MACjCC,eAAe,EAAE;IAEnB;;IAEF;;IAEA;;IAEA;;IAEA;;IAEA;;IAEA;IAAA;EAIF,CAAC,CAAC;;EAEJ3B,SAAS,CAAC,MAAK;IACZ,MAAM8B,SAAS,GAAE,YAAU;MACvB,MAAMC,GAAG,GAAG,0BAA0B;MACtC,MAAMC,QAAQ,GAAG,EAAE;MACnB,MAAMC,QAAQ,GAAG,EAAE;MACrB,MAAMC,KAAK,CAACH,GAAG,CAAC,CAACI,IAAI,CAAEb,IAAI,IAAI;QAC3Bc,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEf,IAAI,CAAC;QAC7B,MAAMgB,GAAG,GAAGhB,IAAI,CAACiB,IAAI,EAAE;QACvB,OAAOD,GAAG;MACd,CAAC,CAAC,CAACH,IAAI,CAAEG,GAAG,IAAK;QACbF,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEC,GAAG,CAAC;QAC3B,KAAK,MAAME,GAAG,IAAIF,GAAG,EAAE;UACnBN,QAAQ,CAACS,IAAI,CAACD,GAAG,CAACE,GAAG,CAAC;QAC1B;QAEAnB,OAAO,CAAC;UACJoB,MAAM,EAAC,CAAC,KAAK,EAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC;UACjCnB,QAAQ,EAAE,CACR;YAEEC,KAAK,EAAE,YAAY;YACnBH,IAAI,EAACU,QAAQ;YACbL,eAAe,EAAE,SAAS;YAC1BiB,IAAI,EAAC,CAAC;YACNC,OAAO,EAAC;UACV;;UAEF;;UAEA;;UAEA;;UAEA;;UAEA;;UAEA;UAAA;QAIF,CAAC,CAAC;;QACJT,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEL,QAAQ,CAAC;MAEnC,CAAC,CAAC,CAACc,KAAK,CAACC,CAAC,IAAI;QAEPX,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEU,CAAC,CAAC;MAE3B,CAAC,CAAC;MAEF,MAAMb,KAAK,CAACH,GAAG,CAAC,CAACI,IAAI,CAAEP,KAAK,IAAI;QAC9BQ,OAAO,CAACC,GAAG,CAAC,UAAU,EAAET,KAAK,CAAC;QAC9B,MAAMoB,GAAG,GAAGpB,KAAK,CAACW,IAAI,EAAE;QACxB,OAAOS,GAAG;MAEd,CAAC,CAAC,CAACb,IAAI,CAAEa,GAAG,IAAK;QACbZ,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEW,GAAG,CAAC;QAC3B,KAAK,MAAMR,GAAG,IAAIQ,GAAG,EAAE;UACnBf,QAAQ,CAACQ,IAAI,CAACD,GAAG,CAACS,OAAO,CAAC;QAE9B;QAEApB,QAAQ,CAAC;UACLc,MAAM,EAAC,CAAC,KAAK,EAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC;UACjCnB,QAAQ,EAAE,CACR;YACEC,KAAK,EAAE,aAAa;YACpBH,IAAI,EAACW,QAAQ;YACbN,eAAe,EAAE,SAAS;YAC1BiB,IAAI,EAAC,CAAC;YACNC,OAAO,EAAC;UAEV,CAAC;QAEL,CAAC,CAAC;QACJT,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEJ,QAAQ,CAAC;MAEnC,CAAC,CAAC,CAACa,KAAK,CAACC,CAAC,IAAI;QACPX,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEU,CAAC,CAAC;MAC3B,CAAC,CAAC;IAEP,CAAC;IAEDjB,SAAS,EAAE;EAEf,CAAC,EAAC,EAAE,CAAC;EAIL,oBACE,QAAC,GAAG;IAAC,EAAE,EAAC,KAAK;IAAC,OAAO,EAAC,MAAM;IAC5B,mBAAmB,EAAC,iBAAiB;IACrC,YAAY,EAAC,OAAO;IACpB,GAAG,EAAC,MAAM;IAAA,wBAEd,QAAC,GAAG;MACJ,UAAU,EAAC,QAAQ;MACnB,OAAO,EAAC,MAAM;MACd,UAAU,EAAC,QAAQ;MACnB,cAAc,EAAC,QAAQ;MAAA,uBAGzB,QAAC,GAAG;QAAC,IAAI,EAAER,IAAK;QAAC,OAAO,EAAEV;MAAQ;QAAA;QAAA;QAAA;MAAA;IAAE;MAAA;MAAA;MAAA;IAAA,QAExB,eACN,QAAC,GAAG;MAEA,UAAU,EAAC,QAAQ;MACnB,OAAO,EAAC,MAAM;MACd,UAAU,EAAC,QAAQ;MACnB,cAAc,EAAC,QAAQ;MAAA,uBAEzB,QAAC,GAAG;QAAC,IAAI,EAAEgB,KAAM;QAAC,OAAO,EAAEhB;MAAQ;QAAA;QAAA;QAAA;MAAA;IAAE;MAAA;MAAA;MAAA;IAAA,QAEjC;EAAA;IAAA;IAAA;IAAA;EAAA,QACA;AAEV,CAAC;AAAA,GAvKGS,QAAQ;AAAA,KAARA,QAAQ;AAwKd,eAAeA,QAAQ;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}